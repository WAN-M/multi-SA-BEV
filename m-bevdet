/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/distributed/launch.py:178: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use_env is set by default in torchrun.
If your script expects `--local_rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
2024-05-16 08:51:02,148 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.19 (default, Mar 20 2024, 19:58:24) [GCC 11.2.0]
CUDA available: True
GPU 0,1,2,3,4,5,6,7: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /gpfsdata/apps/cuda/11.3
NVCC: Cuda compilation tools, release 11.3, V11.3.58
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.10.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0+cu111
OpenCV: 4.9.0
MMCV: 1.5.3
MMCV Compiler: GCC 7.5
MMCV CUDA Compiler: 11.3
MMDetection: 2.27.0
MMSegmentation: 0.25.0
MMDetection3D: 1.0.0rc4+cc89c43
spconv2.0: False
------------------------------------------------------------

2024-05-16 08:51:03,886 - mmdet - INFO - Distributed training: True
2024-05-16 08:51:05,570 - mmdet - INFO - Config:
point_cloud_range = [-51.2, -51.2, -5, 51.2, 51.2, 3]
class_names = [
    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
]
dataset_type = 'NuScenesDataset'
data_root = 'data/nuscenes/'
input_modality = dict(
    use_lidar=True,
    use_camera=True,
    use_radar=False,
    use_map=False,
    use_external=False)
file_client_args = dict(backend='disk')
train_pipeline = [
    dict(
        type='PrepareImageInputs',
        is_train=True,
        load_point_label=True,
        data_config=dict(
            cams=[
                'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT',
                'CAM_BACK_LEFT', 'CAM_BACK', 'CAM_BACK_RIGHT'
            ],
            Ncams=6,
            input_size=(256, 704),
            src_size=(900, 1600),
            resize=(-0.06, 0.11),
            rot=(-5.4, 5.4),
            flip=True,
            crop_h=(0.0, 0.0),
            resize_test=0.0),
        sequential=True),
    dict(
        type='LoadAnnotationsBEVDepth',
        bda_aug_conf=dict(
            rot_lim=(0, 0), scale_lim=(1, 1), flip_dx_ratio=0,
            flip_dy_ratio=0),
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk'),
        trans_ego=True,
        use_bda=True),
    dict(
        type='ObjectRangeFilter',
        point_cloud_range=[-51.2, -51.2, -5, 51.2, 51.2, 3]),
    dict(
        type='ObjectNameFilter',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='Collect3D',
        keys=[
            'points', 'img_inputs', 'gt_bboxes_3d', 'gt_labels_3d', 'gt_depth',
            'gt_semantic'
        ])
]
test_pipeline = [
    dict(
        type='PrepareImageInputs',
        data_config=dict(
            cams=[
                'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT',
                'CAM_BACK_LEFT', 'CAM_BACK', 'CAM_BACK_RIGHT'
            ],
            Ncams=6,
            input_size=(256, 704),
            src_size=(900, 1600),
            resize=(-0.06, 0.11),
            rot=(-5.4, 5.4),
            flip=True,
            crop_h=(0.0, 0.0),
            resize_test=0.0),
        sequential=True),
    dict(
        type='LoadAnnotationsBEVDepth',
        bda_aug_conf=dict(
            rot_lim=(0, 0), scale_lim=(1, 1), flip_dx_ratio=0,
            flip_dy_ratio=0),
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        is_train=False),
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk'),
        trans_ego=True),
    dict(
        type='MultiScaleFlipAug3D',
        img_scale=(1333, 800),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                with_label=False),
            dict(type='Collect3D', keys=['points', 'img_inputs'])
        ])
]
eval_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=10,
        file_client_args=dict(backend='disk')),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'
        ],
        with_label=False),
    dict(type='Collect3D', keys=['points'])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=4,
    train=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/bevdetv2-nuscenes_infos_train.pkl',
        pipeline=[
            dict(
                type='PrepareImageInputs',
                is_train=True,
                load_point_label=True,
                data_config=dict(
                    cams=[
                        'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT',
                        'CAM_BACK_LEFT', 'CAM_BACK', 'CAM_BACK_RIGHT'
                    ],
                    Ncams=6,
                    input_size=(256, 704),
                    src_size=(900, 1600),
                    resize=(-0.06, 0.11),
                    rot=(-5.4, 5.4),
                    flip=True,
                    crop_h=(0.0, 0.0),
                    resize_test=0.0),
                sequential=True),
            dict(
                type='LoadAnnotationsBEVDepth',
                bda_aug_conf=dict(
                    rot_lim=(0, 0),
                    scale_lim=(1, 1),
                    flip_dx_ratio=0,
                    flip_dy_ratio=0),
                classes=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ]),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk'),
                trans_ego=True,
                use_bda=True),
            dict(
                type='ObjectRangeFilter',
                point_cloud_range=[-51.2, -51.2, -5, 51.2, 51.2, 3]),
            dict(
                type='ObjectNameFilter',
                classes=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ]),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ]),
            dict(
                type='Collect3D',
                keys=[
                    'points', 'img_inputs', 'gt_bboxes_3d', 'gt_labels_3d',
                    'gt_depth', 'gt_semantic'
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=False,
        box_type_3d='LiDAR',
        use_valid_flag=True,
        img_info_prototype='bevdet4d',
        multi_adj_frame_id_cfg=(1, 2, 1)),
    val=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/bevdetv2-nuscenes_infos_val.pkl',
        pipeline=[
            dict(
                type='PrepareImageInputs',
                data_config=dict(
                    cams=[
                        'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT',
                        'CAM_BACK_LEFT', 'CAM_BACK', 'CAM_BACK_RIGHT'
                    ],
                    Ncams=6,
                    input_size=(256, 704),
                    src_size=(900, 1600),
                    resize=(-0.06, 0.11),
                    rot=(-5.4, 5.4),
                    flip=True,
                    crop_h=(0.0, 0.0),
                    resize_test=0.0),
                sequential=True),
            dict(
                type='LoadAnnotationsBEVDepth',
                bda_aug_conf=dict(
                    rot_lim=(0, 0),
                    scale_lim=(1, 1),
                    flip_dx_ratio=0,
                    flip_dy_ratio=0),
                classes=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                is_train=False),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk'),
                trans_ego=True),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(type='Collect3D', keys=['points', 'img_inputs'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR',
        img_info_prototype='bevdet4d',
        multi_adj_frame_id_cfg=(1, 2, 1)),
    test=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/bevdetv2-nuscenes_infos_val.pkl',
        pipeline=[
            dict(
                type='PrepareImageInputs',
                data_config=dict(
                    cams=[
                        'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT',
                        'CAM_BACK_LEFT', 'CAM_BACK', 'CAM_BACK_RIGHT'
                    ],
                    Ncams=6,
                    input_size=(256, 704),
                    src_size=(900, 1600),
                    resize=(-0.06, 0.11),
                    rot=(-5.4, 5.4),
                    flip=True,
                    crop_h=(0.0, 0.0),
                    resize_test=0.0),
                sequential=True),
            dict(
                type='LoadAnnotationsBEVDepth',
                bda_aug_conf=dict(
                    rot_lim=(0, 0),
                    scale_lim=(1, 1),
                    flip_dx_ratio=0,
                    flip_dy_ratio=0),
                classes=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                is_train=False),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk'),
                trans_ego=True),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(type='Collect3D', keys=['points', 'img_inputs'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR',
        img_info_prototype='bevdet4d',
        multi_adj_frame_id_cfg=(1, 2, 1)))
evaluation = dict(
    interval=24,
    pipeline=[
        dict(
            type='LoadPointsFromFile',
            coord_type='LIDAR',
            load_dim=5,
            use_dim=5,
            file_client_args=dict(backend='disk')),
        dict(
            type='LoadPointsFromMultiSweeps',
            sweeps_num=10,
            file_client_args=dict(backend='disk')),
        dict(
            type='DefaultFormatBundle3D',
            class_names=[
                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                'barrier'
            ],
            with_label=False),
        dict(type='Collect3D', keys=['points'])
    ])
checkpoint_config = dict(interval=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
work_dir = './work_dirs/my-sabev-r50'
load_from = 'work_dirs/final/sabev/epoch_24_ema.pth'
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
voxel_size = [0.2, 0.2, 8]
head_voxel_size = [0.1, 0.1, 0.2]
data_config = dict(
    cams=[
        'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT', 'CAM_BACK_LEFT',
        'CAM_BACK', 'CAM_BACK_RIGHT'
    ],
    Ncams=6,
    input_size=(256, 704),
    src_size=(900, 1600),
    resize=(-0.06, 0.11),
    rot=(-5.4, 5.4),
    flip=True,
    crop_h=(0.0, 0.0),
    resize_test=0.0)
grid_config = dict(
    x=[-51.2, 51.2, 0.8],
    y=[-51.2, 51.2, 0.8],
    z=[-5, 3, 8],
    depth=[1.0, 60.0, 0.5])
use_bda = False
bda_aug_conf = dict(
    rot_lim=(0, 0), scale_lim=(1, 1), flip_dx_ratio=0, flip_dy_ratio=0)
numC_Trans = 80
multi_adj_frame_id_cfg = (1, 2, 1)
model = dict(
    type='MySABEV',
    use_bev_paste=False,
    bda_aug_conf=dict(
        rot_lim=(0, 0), scale_lim=(1, 1), flip_dx_ratio=0, flip_dy_ratio=0),
    num_adj=1,
    se=True,
    lc_fusion=True,
    camera_stream=True,
    pts_voxel_layer=dict(
        max_num_points=20,
        point_cloud_range=[-51.2, -51.2, -5, 51.2, 51.2, 3],
        voxel_size=[0.2, 0.2, 8],
        max_voxels=(30000, 40000)),
    pts_voxel_encoder=dict(
        type='PillarFeatureNet',
        in_channels=5,
        feat_channels=[64],
        with_distance=False,
        voxel_size=[0.2, 0.2, 8],
        norm_cfg=dict(type='BN1d', eps=0.001, momentum=0.01),
        legacy=False),
    pts_middle_encoder=dict(
        type='PointPillarsScatter', in_channels=64, output_shape=(512, 512)),
    pts_backbone=dict(
        type='SECOND',
        in_channels=64,
        out_channels=[64, 128, 256],
        layer_nums=[3, 5, 5],
        layer_strides=[2, 2, 2],
        norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),
        conv_cfg=dict(type='Conv2d', bias=False)),
    pts_neck=dict(
        type='SECONDFPN',
        in_channels=[64, 128, 256],
        out_channels=[128, 128, 128],
        upsample_strides=[0.5, 1, 2],
        norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),
        upsample_cfg=dict(type='deconv', bias=False),
        use_conv_for_no_stride=True),
    img_backbone=dict(
        pretrained='torchvision://resnet50',
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(1, 2, 3),
        frozen_stages=-1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=False,
        with_cp=True,
        style='pytorch'),
    img_neck=dict(
        type='CustomFPN',
        in_channels=[1024, 2048],
        out_channels=512,
        num_outs=1,
        start_level=0,
        out_ids=[0]),
    img_view_transformer=dict(
        type='SABEVPool',
        grid_config=dict(
            x=[-51.2, 51.2, 0.8],
            y=[-51.2, 51.2, 0.8],
            z=[-5, 3, 8],
            depth=[1.0, 60.0, 0.5]),
        input_size=(256, 704),
        in_channels=512,
        out_channels=80,
        depthnet_cfg=dict(use_dcn=False),
        downsample=16),
    img_bev_encoder_backbone=dict(
        type='CustomResNet', numC_input=160, num_channels=[160, 320, 640]),
    img_bev_encoder_neck=dict(
        type='FPN_LSS', in_channels=800, out_channels=256),
    pre_process=dict(
        type='CustomResNet',
        numC_input=80,
        num_layer=[2],
        num_channels=[80],
        stride=[1],
        backbone_output_ids=[0]),
    pts_bbox_head=dict(
        type='CenterHead',
        in_channels=384,
        tasks=[
            dict(num_class=1, class_names=['car']),
            dict(num_class=2, class_names=['truck', 'construction_vehicle']),
            dict(num_class=2, class_names=['bus', 'trailer']),
            dict(num_class=1, class_names=['barrier']),
            dict(num_class=2, class_names=['motorcycle', 'bicycle']),
            dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])
        ],
        common_heads=dict(
            reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),
        share_conv_channel=64,
        bbox_coder=dict(
            type='CenterPointBBoxCoder',
            pc_range=[-51.2, -51.2],
            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
            max_num=500,
            score_threshold=0.1,
            out_size_factor=8,
            voxel_size=[0.1, 0.1],
            code_size=9),
        separate_head=dict(
            type='SeparateHead', init_bias=-2.19, final_kernel=3),
        loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),
        loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),
        norm_bbox=True),
    train_cfg=dict(
        pts=dict(
            point_cloud_range=[-51.2, -51.2, -5, 51.2, 51.2, 3],
            grid_size=[1024, 1024, 40],
            voxel_size=[0.1, 0.1, 0.2],
            out_size_factor=8,
            dense_reg=1,
            gaussian_overlap=0.1,
            max_objs=500,
            min_radius=2,
            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])),
    test_cfg=dict(
        pts=dict(
            pc_range=[-51.2, -51.2],
            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
            max_per_img=500,
            max_pool_nms=False,
            min_radius=[4, 12, 10, 1, 0.85, 0.175],
            score_threshold=0.1,
            out_size_factor=8,
            voxel_size=[0.1, 0.1],
            pre_max_size=1000,
            post_max_size=83,
            nms_type=[
                'rotate', 'rotate', 'rotate', 'circle', 'rotate', 'rotate'
            ],
            nms_thr=[0.2, 0.2, 0.2, 0.2, 0.2, 0.5],
            nms_rescale_factor=[
                1.0, [0.7, 0.7], [0.4, 0.55], 1.1, [1.0, 1.0], [4.5, 9.0]
            ])))
share_data_config = dict(
    type='NuScenesDataset',
    classes=[
        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
    ],
    modality=dict(
        use_lidar=True,
        use_camera=True,
        use_radar=False,
        use_map=False,
        use_external=False),
    img_info_prototype='bevdet4d',
    multi_adj_frame_id_cfg=(1, 2, 1))
test_data_config = dict(
    pipeline=[
        dict(
            type='PrepareImageInputs',
            data_config=dict(
                cams=[
                    'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT',
                    'CAM_BACK_LEFT', 'CAM_BACK', 'CAM_BACK_RIGHT'
                ],
                Ncams=6,
                input_size=(256, 704),
                src_size=(900, 1600),
                resize=(-0.06, 0.11),
                rot=(-5.4, 5.4),
                flip=True,
                crop_h=(0.0, 0.0),
                resize_test=0.0),
            sequential=True),
        dict(
            type='LoadAnnotationsBEVDepth',
            bda_aug_conf=dict(
                rot_lim=(0, 0),
                scale_lim=(1, 1),
                flip_dx_ratio=0,
                flip_dy_ratio=0),
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            is_train=False),
        dict(
            type='LoadPointsFromFile',
            coord_type='LIDAR',
            load_dim=5,
            use_dim=5,
            file_client_args=dict(backend='disk'),
            trans_ego=True),
        dict(
            type='MultiScaleFlipAug3D',
            img_scale=(1333, 800),
            pts_scale_ratio=1,
            flip=False,
            transforms=[
                dict(
                    type='DefaultFormatBundle3D',
                    class_names=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ],
                    with_label=False),
                dict(type='Collect3D', keys=['points', 'img_inputs'])
            ])
    ],
    ann_file='data/nuscenes/bevdetv2-nuscenes_infos_val.pkl',
    type='NuScenesDataset',
    classes=[
        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
    ],
    modality=dict(
        use_lidar=True,
        use_camera=True,
        use_radar=False,
        use_map=False,
        use_external=False),
    img_info_prototype='bevdet4d',
    multi_adj_frame_id_cfg=(1, 2, 1))
key = 'test'
optimizer = dict(type='AdamW', lr=0.0001, weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=5, norm_type=2))
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=200,
    warmup_ratio=0.001,
    gamma=0.5,
    step=[5])
runner = dict(type='EpochBasedRunner', max_epochs=24)
custom_hooks = [
    dict(type='MEGVIIEMAHook', init_updates=10560, priority='NORMAL'),
    dict(type='SequentialControlHook', temporal_start_epoch=3)
]
fp16 = dict(loss_scale='dynamic')
gpu_ids = range(0, 8)

2024-05-16 08:51:05,588 - mmdet - INFO - Set random seed to 0, deterministic: False
2024-05-16 08:51:06,797 - mmdet - INFO - initialize SECOND with init_cfg {'type': 'Kaiming', 'layer': 'Conv2d'}
2024-05-16 08:51:06,833 - mmdet - INFO - initialize SECONDFPN with init_cfg [{'type': 'Kaiming', 'layer': 'ConvTranspose2d'}, {'type': 'Constant', 'layer': 'NaiveSyncBatchNorm2d', 'val': 1.0}]
2024-05-16 08:51:06,840 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}
2024-05-16 08:51:06,841 - mmcv - INFO - load model from: torchvision://resnet50
2024-05-16 08:51:06,841 - mmcv - INFO - load checkpoint from torchvision path: torchvision://resnet50
2024-05-16 08:51:14,386 - mmcv - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

2024-05-16 08:51:14,416 - mmdet - INFO - initialize CustomFPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2024-05-16 08:51:14,504 - mmdet - INFO - Model:
MySABEV(
  (pts_voxel_layer): Voxelization(voxel_size=[0.2, 0.2, 8], point_cloud_range=[-51.2, -51.2, -5, 51.2, 51.2, 3], max_num_points=20, max_voxels=(30000, 40000), deterministic=True)
  (pts_voxel_encoder): PillarFeatureNet(
    (pfn_layers): ModuleList(
      (0): PFNLayer(
        (norm): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (linear): Linear(in_features=11, out_features=64, bias=False)
      )
    )
  )
  (pts_middle_encoder): PointPillarsScatter()
  (pts_backbone): SECOND(
    (blocks): ModuleList(
      (0): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): BatchNorm2d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (7): BatchNorm2d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (8): ReLU(inplace=True)
        (9): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (10): BatchNorm2d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (11): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (7): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (8): ReLU(inplace=True)
        (9): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (10): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (11): ReLU(inplace=True)
        (12): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (13): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (14): ReLU(inplace=True)
        (15): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (16): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (17): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (7): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (8): ReLU(inplace=True)
        (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (10): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (11): ReLU(inplace=True)
        (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (13): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (14): ReLU(inplace=True)
        (15): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (16): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (17): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
  (pts_neck): SECONDFPN(
    (deblocks): ModuleList(
      (0): Sequential(
        (0): Conv2d(64, 128, kernel_size=(2, 2), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
  init_cfg=[{'type': 'Kaiming', 'layer': 'ConvTranspose2d'}, {'type': 'Constant', 'layer': 'NaiveSyncBatchNorm2d', 'val': 1.0}]
  (pts_bbox_head): CenterHead(
    (loss_cls): GaussianFocalLoss()
    (loss_bbox): L1Loss()
    (shared_conv): ConvModule(
      (conv): Conv2d(384, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (task_heads): ModuleList(
      (0): SeparateHead(
        (reg): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (height): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (dim): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (rot): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (vel): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (heatmap): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
      (1): SeparateHead(
        (reg): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (height): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (dim): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (rot): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (vel): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (heatmap): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
      (2): SeparateHead(
        (reg): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (height): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (dim): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (rot): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (vel): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (heatmap): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
      (3): SeparateHead(
        (reg): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (height): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (dim): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (rot): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (vel): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (heatmap): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
      (4): SeparateHead(
        (reg): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (height): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (dim): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (rot): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (vel): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (heatmap): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
      (5): SeparateHead(
        (reg): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (height): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (dim): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (rot): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (vel): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (heatmap): Sequential(
          (0): ConvModule(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (activate): ReLU(inplace=True)
          )
          (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
    )
  )
  (img_backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}
  (img_neck): CustomFPN(
    (lateral_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ConvModule(
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (fpn_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
  init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
  (img_view_transformer): SABEVPool(
    (depth_net): DepthNet(
      (reduce_conv): Sequential(
        (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (context_conv): Conv2d(512, 80, kernel_size=(1, 1), stride=(1, 1))
      (bn): BatchNorm1d(27, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (depth_mlp): Mlp(
        (fc1): Linear(in_features=27, out_features=512, bias=True)
        (act): ReLU()
        (drop1): Dropout(p=0.0, inplace=False)
        (fc2): Linear(in_features=512, out_features=512, bias=True)
        (drop2): Dropout(p=0.0, inplace=False)
      )
      (depth_se): SELayer(
        (conv_reduce): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (act1): ReLU()
        (conv_expand): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (gate): Sigmoid()
      )
      (context_mlp): Mlp(
        (fc1): Linear(in_features=27, out_features=512, bias=True)
        (act): ReLU()
        (drop1): Dropout(p=0.0, inplace=False)
        (fc2): Linear(in_features=512, out_features=512, bias=True)
        (drop2): Dropout(p=0.0, inplace=False)
      )
      (context_se): SELayer(
        (conv_reduce): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (act1): ReLU()
        (conv_expand): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (gate): Sigmoid()
      )
      (depth_conv): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): BasicBlock(
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): BasicBlock(
          (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (3): ASPP(
          (aspp1): _ASPPModule(
            (atrous_conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU()
          )
          (aspp2): _ASPPModule(
            (atrous_conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), bias=False)
            (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU()
          )
          (aspp3): _ASPPModule(
            (atrous_conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), bias=False)
            (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU()
          )
          (aspp4): _ASPPModule(
            (atrous_conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), bias=False)
            (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU()
          )
          (global_avg_pool): Sequential(
            (0): AdaptiveAvgPool2d(output_size=(1, 1))
            (1): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (3): ReLU()
          )
          (conv1): Conv2d(2560, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU()
          (dropout): Dropout(p=0.5, inplace=False)
        )
        (4): Conv2d(512, 120, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (img_bev_encoder_backbone): CustomResNet(
    (layers): Sequential(
      (0): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Conv2d(160, 160, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        )
        (1): BasicBlock(
          (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (1): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(160, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Conv2d(160, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        )
        (1): BasicBlock(
          (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
      (2): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(320, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Conv2d(320, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        )
        (1): BasicBlock(
          (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
    )
  )
  (img_bev_encoder_neck): FPN_LSS(
    (up): Upsample(scale_factor=4.0, mode=bilinear)
    (conv): Sequential(
      (0): Conv2d(800, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
    )
    (up2): Sequential(
      (0): Upsample(scale_factor=2.0, mode=bilinear)
      (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (3): ReLU(inplace=True)
      (4): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (pre_process_net): CustomResNet(
    (layers): Sequential(
      (0): Sequential(
        (0): BasicBlock(
          (conv1): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (downsample): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (1): BasicBlock(
          (conv1): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(80, 80, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
    )
  )
  (seblock): SE_Block(
    (att): Sequential(
      (0): AdaptiveAvgPool2d(output_size=1)
      (1): Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1))
      (2): Sigmoid()
    )
  )
  (reduc_conv): ConvModule(
    (conv): Conv2d(640, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(384, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (activate): ReLU()
  )
)
2024-05-16 08:51:21,052 - mmdet - INFO - load checkpoint from local path: work_dirs/final/sabev/epoch_24_ema.pth
2024-05-16 08:51:23,522 - mmdet - WARNING - The model and loaded state dict do not match exactly

size mismatch for pts_bbox_head.shared_conv.conv.weight: copying a param with shape torch.Size([64, 256, 3, 3]) from checkpoint, the shape in current model is torch.Size([64, 384, 3, 3]).
missing keys in source state_dict: pts_voxel_encoder.pfn_layers.0.norm.weight, pts_voxel_encoder.pfn_layers.0.norm.bias, pts_voxel_encoder.pfn_layers.0.norm.running_mean, pts_voxel_encoder.pfn_layers.0.norm.running_var, pts_voxel_encoder.pfn_layers.0.linear.weight, pts_backbone.blocks.0.0.weight, pts_backbone.blocks.0.1.weight, pts_backbone.blocks.0.1.bias, pts_backbone.blocks.0.1.running_mean, pts_backbone.blocks.0.1.running_var, pts_backbone.blocks.0.3.weight, pts_backbone.blocks.0.4.weight, pts_backbone.blocks.0.4.bias, pts_backbone.blocks.0.4.running_mean, pts_backbone.blocks.0.4.running_var, pts_backbone.blocks.0.6.weight, pts_backbone.blocks.0.7.weight, pts_backbone.blocks.0.7.bias, pts_backbone.blocks.0.7.running_mean, pts_backbone.blocks.0.7.running_var, pts_backbone.blocks.0.9.weight, pts_backbone.blocks.0.10.weight, pts_backbone.blocks.0.10.bias, pts_backbone.blocks.0.10.running_mean, pts_backbone.blocks.0.10.running_var, pts_backbone.blocks.1.0.weight, pts_backbone.blocks.1.1.weight, pts_backbone.blocks.1.1.bias, pts_backbone.blocks.1.1.running_mean, pts_backbone.blocks.1.1.running_var, pts_backbone.blocks.1.3.weight, pts_backbone.blocks.1.4.weight, pts_backbone.blocks.1.4.bias, pts_backbone.blocks.1.4.running_mean, pts_backbone.blocks.1.4.running_var, pts_backbone.blocks.1.6.weight, pts_backbone.blocks.1.7.weight, pts_backbone.blocks.1.7.bias, pts_backbone.blocks.1.7.running_mean, pts_backbone.blocks.1.7.running_var, pts_backbone.blocks.1.9.weight, pts_backbone.blocks.1.10.weight, pts_backbone.blocks.1.10.bias, pts_backbone.blocks.1.10.running_mean, pts_backbone.blocks.1.10.running_var, pts_backbone.blocks.1.12.weight, pts_backbone.blocks.1.13.weight, pts_backbone.blocks.1.13.bias, pts_backbone.blocks.1.13.running_mean, pts_backbone.blocks.1.13.running_var, pts_backbone.blocks.1.15.weight, pts_backbone.blocks.1.16.weight, pts_backbone.blocks.1.16.bias, pts_backbone.blocks.1.16.running_mean, pts_backbone.blocks.1.16.running_var, pts_backbone.blocks.2.0.weight, pts_backbone.blocks.2.1.weight, pts_backbone.blocks.2.1.bias, pts_backbone.blocks.2.1.running_mean, pts_backbone.blocks.2.1.running_var, pts_backbone.blocks.2.3.weight, pts_backbone.blocks.2.4.weight, pts_backbone.blocks.2.4.bias, pts_backbone.blocks.2.4.running_mean, pts_backbone.blocks.2.4.running_var, pts_backbone.blocks.2.6.weight, pts_backbone.blocks.2.7.weight, pts_backbone.blocks.2.7.bias, pts_backbone.blocks.2.7.running_mean, pts_backbone.blocks.2.7.running_var, pts_backbone.blocks.2.9.weight, pts_backbone.blocks.2.10.weight, pts_backbone.blocks.2.10.bias, pts_backbone.blocks.2.10.running_mean, pts_backbone.blocks.2.10.running_var, pts_backbone.blocks.2.12.weight, pts_backbone.blocks.2.13.weight, pts_backbone.blocks.2.13.bias, pts_backbone.blocks.2.13.running_mean, pts_backbone.blocks.2.13.running_var, pts_backbone.blocks.2.15.weight, pts_backbone.blocks.2.16.weight, pts_backbone.blocks.2.16.bias, pts_backbone.blocks.2.16.running_mean, pts_backbone.blocks.2.16.running_var, pts_neck.deblocks.0.0.weight, pts_neck.deblocks.0.1.weight, pts_neck.deblocks.0.1.bias, pts_neck.deblocks.0.1.running_mean, pts_neck.deblocks.0.1.running_var, pts_neck.deblocks.1.0.weight, pts_neck.deblocks.1.1.weight, pts_neck.deblocks.1.1.bias, pts_neck.deblocks.1.1.running_mean, pts_neck.deblocks.1.1.running_var, pts_neck.deblocks.2.0.weight, pts_neck.deblocks.2.1.weight, pts_neck.deblocks.2.1.bias, pts_neck.deblocks.2.1.running_mean, pts_neck.deblocks.2.1.running_var, seblock.att.1.weight, seblock.att.1.bias, reduc_conv.conv.weight, reduc_conv.bn.weight, reduc_conv.bn.bias, reduc_conv.bn.running_mean, reduc_conv.bn.running_var

2024-05-16 08:51:23,532 - mmdet - INFO - Start running, host: huliang@node11, work_dir: /gpfsdata/home/huliang/bev/multi-SA-BEV/work_dirs/my-sabev-r50
2024-05-16 08:51:23,533 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) MEGVIIEMAHook                      
(NORMAL      ) SequentialControlHook              
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) SequentialControlHook              
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) MEGVIIEMAHook                      
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) MEGVIIEMAHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2024-05-16 08:51:23,533 - mmdet - INFO - workflow: [('train', 1)], max: 24 epochs
2024-05-16 08:51:23,535 - mmdet - INFO - Checkpoints will be saved to /gpfsdata/home/huliang/bev/multi-SA-BEV/work_dirs/my-sabev-r50 by HardDiskBackend.
2024-05-16 08:51:31,637 - mmcv - INFO - Reducer buckets have been rebuilt in this iteration.
2024-05-16 08:52:40,861 - mmdet - INFO - Epoch [1][50/880]	lr: 2.458e-05, eta: 8:59:56, time: 1.538, data_time: 0.159, memory: 7466, task0.loss_xy: 0.1943, task0.loss_z: 0.2306, task0.loss_whl: 0.3837, task0.loss_yaw: 0.3523, task0.loss_vel: 0.6284, task0.loss_heatmap: 4.7581, task1.loss_xy: 0.2070, task1.loss_z: 0.2121, task1.loss_whl: 0.4250, task1.loss_yaw: 0.3527, task1.loss_vel: 0.5653, task1.loss_heatmap: 8.1580, task2.loss_xy: 0.2028, task2.loss_z: 0.2643, task2.loss_whl: 0.7784, task2.loss_yaw: 0.3872, task2.loss_vel: 0.7086, task2.loss_heatmap: 6.3000, task3.loss_xy: 0.2353, task3.loss_z: 0.1845, task3.loss_whl: 0.4181, task3.loss_yaw: 0.3786, task3.loss_vel: 0.0567, task3.loss_heatmap: 4.3292, task4.loss_xy: 0.2783, task4.loss_z: 0.1549, task4.loss_whl: 0.3394, task4.loss_yaw: 0.3629, task4.loss_vel: 0.7012, task4.loss_heatmap: 9.6545, task5.loss_xy: 0.2629, task5.loss_z: 0.1785, task5.loss_whl: 0.6010, task5.loss_yaw: 0.3940, task5.loss_vel: 0.3339, task5.loss_heatmap: 7.3213, loss_depth: 7.1412, loss_semantic: 0.4127, loss: 58.8478, grad_norm: nan
2024-05-16 08:53:50,634 - mmdet - INFO - Epoch [1][100/880]	lr: 4.955e-05, eta: 8:33:32, time: 1.394, data_time: 0.043, memory: 7466, task0.loss_xy: 0.1332, task0.loss_z: 0.1325, task0.loss_whl: 0.1201, task0.loss_yaw: 0.2941, task0.loss_vel: 0.4639, task0.loss_heatmap: 1.5634, task1.loss_xy: 0.1315, task1.loss_z: 0.1356, task1.loss_whl: 0.2234, task1.loss_yaw: 0.2944, task1.loss_vel: 0.3689, task1.loss_heatmap: 1.9604, task2.loss_xy: 0.1452, task2.loss_z: 0.1597, task2.loss_whl: 0.4169, task2.loss_yaw: 0.3036, task2.loss_vel: 0.5076, task2.loss_heatmap: 1.7767, task3.loss_xy: 0.1489, task3.loss_z: 0.1036, task3.loss_whl: 0.2150, task3.loss_yaw: 0.2877, task3.loss_vel: 0.0260, task3.loss_heatmap: 1.1755, task4.loss_xy: 0.1516, task4.loss_z: 0.1070, task4.loss_whl: 0.1759, task4.loss_yaw: 0.3225, task4.loss_vel: 0.4328, task4.loss_heatmap: 1.6837, task5.loss_xy: 0.1464, task5.loss_z: 0.1276, task5.loss_whl: 0.2744, task5.loss_yaw: 0.3361, task5.loss_vel: 0.2687, task5.loss_heatmap: 1.8052, loss_depth: 7.1642, loss_semantic: 0.4133, loss: 24.4972, grad_norm: 69.7053
2024-05-16 08:54:57,078 - mmdet - INFO - Epoch [1][150/880]	lr: 7.453e-05, eta: 8:16:25, time: 1.329, data_time: 0.045, memory: 7466, task0.loss_xy: 0.1139, task0.loss_z: 0.0788, task0.loss_whl: 0.0770, task0.loss_yaw: 0.2383, task0.loss_vel: 0.4459, task0.loss_heatmap: 1.1660, task1.loss_xy: 0.1148, task1.loss_z: 0.0922, task1.loss_whl: 0.1485, task1.loss_yaw: 0.2441, task1.loss_vel: 0.3521, task1.loss_heatmap: 1.4475, task2.loss_xy: 0.1193, task2.loss_z: 0.0912, task2.loss_whl: 0.1780, task2.loss_yaw: 0.2256, task2.loss_vel: 0.4370, task2.loss_heatmap: 1.1719, task3.loss_xy: 0.1203, task3.loss_z: 0.0636, task3.loss_whl: 0.1640, task3.loss_yaw: 0.2316, task3.loss_vel: 0.0184, task3.loss_heatmap: 0.8131, task4.loss_xy: 0.1168, task4.loss_z: 0.0737, task4.loss_whl: 0.1334, task4.loss_yaw: 0.2969, task4.loss_vel: 0.3968, task4.loss_heatmap: 0.9691, task5.loss_xy: 0.1208, task5.loss_z: 0.0827, task5.loss_whl: 0.1783, task5.loss_yaw: 0.3078, task5.loss_vel: 0.2045, task5.loss_heatmap: 1.2578, loss_depth: 7.1571, loss_semantic: 0.4112, loss: 19.8602, grad_norm: 35.5043
2024-05-16 08:56:05,855 - mmdet - INFO - Epoch [1][200/880]	lr: 9.950e-05, eta: 8:11:23, time: 1.376, data_time: 0.044, memory: 7466, task0.loss_xy: 0.1075, task0.loss_z: 0.0661, task0.loss_whl: 0.0661, task0.loss_yaw: 0.1673, task0.loss_vel: 0.4297, task0.loss_heatmap: 1.0837, task1.loss_xy: 0.1108, task1.loss_z: 0.0781, task1.loss_whl: 0.1243, task1.loss_yaw: 0.1740, task1.loss_vel: 0.3244, task1.loss_heatmap: 1.3706, task2.loss_xy: 0.1123, task2.loss_z: 0.0780, task2.loss_whl: 0.1337, task2.loss_yaw: 0.1745, task2.loss_vel: 0.4618, task2.loss_heatmap: 1.1902, task3.loss_xy: 0.1109, task3.loss_z: 0.0530, task3.loss_whl: 0.1354, task3.loss_yaw: 0.2105, task3.loss_vel: 0.0169, task3.loss_heatmap: 0.7434, task4.loss_xy: 0.1062, task4.loss_z: 0.0638, task4.loss_whl: 0.1177, task4.loss_yaw: 0.2761, task4.loss_vel: 0.3446, task4.loss_heatmap: 0.9829, task5.loss_xy: 0.1126, task5.loss_z: 0.0691, task5.loss_whl: 0.1517, task5.loss_yaw: 0.2978, task5.loss_vel: 0.1882, task5.loss_heatmap: 1.1696, loss_depth: 7.2582, loss_semantic: 0.4238, loss: 19.0854, grad_norm: 27.5586
2024-05-16 08:57:11,200 - mmdet - INFO - Epoch [1][250/880]	lr: 1.000e-04, eta: 8:03:02, time: 1.306, data_time: 0.045, memory: 7466, task0.loss_xy: 0.1057, task0.loss_z: 0.0615, task0.loss_whl: 0.0617, task0.loss_yaw: 0.1422, task0.loss_vel: 0.4132, task0.loss_heatmap: 1.0329, task1.loss_xy: 0.1099, task1.loss_z: 0.0742, task1.loss_whl: 0.1143, task1.loss_yaw: 0.1512, task1.loss_vel: 0.3238, task1.loss_heatmap: 1.3694, task2.loss_xy: 0.1104, task2.loss_z: 0.0737, task2.loss_whl: 0.1125, task2.loss_yaw: 0.1377, task2.loss_vel: 0.5028, task2.loss_heatmap: 1.1953, task3.loss_xy: 0.1081, task3.loss_z: 0.0473, task3.loss_whl: 0.1267, task3.loss_yaw: 0.2012, task3.loss_vel: 0.0148, task3.loss_heatmap: 0.7603, task4.loss_xy: 0.1004, task4.loss_z: 0.0606, task4.loss_whl: 0.1126, task4.loss_yaw: 0.2597, task4.loss_vel: 0.3375, task4.loss_heatmap: 0.9223, task5.loss_xy: 0.1067, task5.loss_z: 0.0655, task5.loss_whl: 0.1404, task5.loss_yaw: 0.2942, task5.loss_vel: 0.1912, task5.loss_heatmap: 1.0825, loss_depth: 7.3211, loss_semantic: 0.4282, loss: 18.7732, grad_norm: 22.1640
2024-05-16 08:58:16,685 - mmdet - INFO - Epoch [1][300/880]	lr: 1.000e-04, eta: 7:57:19, time: 1.310, data_time: 0.045, memory: 7466, task0.loss_xy: 0.1038, task0.loss_z: 0.0596, task0.loss_whl: 0.0606, task0.loss_yaw: 0.1280, task0.loss_vel: 0.4296, task0.loss_heatmap: 1.0055, task1.loss_xy: 0.1064, task1.loss_z: 0.0719, task1.loss_whl: 0.1113, task1.loss_yaw: 0.1409, task1.loss_vel: 0.3095, task1.loss_heatmap: 1.3331, task2.loss_xy: 0.1082, task2.loss_z: 0.0735, task2.loss_whl: 0.1105, task2.loss_yaw: 0.1352, task2.loss_vel: 0.4625, task2.loss_heatmap: 1.1490, task3.loss_xy: 0.1062, task3.loss_z: 0.0422, task3.loss_whl: 0.1151, task3.loss_yaw: 0.1820, task3.loss_vel: 0.0171, task3.loss_heatmap: 0.7011, task4.loss_xy: 0.0985, task4.loss_z: 0.0604, task4.loss_whl: 0.1014, task4.loss_yaw: 0.2549, task4.loss_vel: 0.3502, task4.loss_heatmap: 0.9611, task5.loss_xy: 0.1037, task5.loss_z: 0.0611, task5.loss_whl: 0.1404, task5.loss_yaw: 0.2923, task5.loss_vel: 0.1877, task5.loss_heatmap: 1.0131, loss_depth: 7.2891, loss_semantic: 0.4350, loss: 18.4120, grad_norm: 23.4853
2024-05-16 08:59:21,234 - mmdet - INFO - Epoch [1][350/880]	lr: 1.000e-04, eta: 7:52:00, time: 1.291, data_time: 0.044, memory: 7466, task0.loss_xy: 0.1037, task0.loss_z: 0.0564, task0.loss_whl: 0.0589, task0.loss_yaw: 0.1273, task0.loss_vel: 0.4132, task0.loss_heatmap: 0.9783, task1.loss_xy: 0.1091, task1.loss_z: 0.0696, task1.loss_whl: 0.1056, task1.loss_yaw: 0.1379, task1.loss_vel: 0.3140, task1.loss_heatmap: 1.3056, task2.loss_xy: 0.1106, task2.loss_z: 0.0683, task2.loss_whl: 0.1040, task2.loss_yaw: 0.1270, task2.loss_vel: 0.4403, task2.loss_heatmap: 1.1933, task3.loss_xy: 0.1036, task3.loss_z: 0.0459, task3.loss_whl: 0.1166, task3.loss_yaw: 0.1796, task3.loss_vel: 0.0186, task3.loss_heatmap: 0.7103, task4.loss_xy: 0.0947, task4.loss_z: 0.0527, task4.loss_whl: 0.1023, task4.loss_yaw: 0.2417, task4.loss_vel: 0.3021, task4.loss_heatmap: 0.8222, task5.loss_xy: 0.1006, task5.loss_z: 0.0601, task5.loss_whl: 0.1379, task5.loss_yaw: 0.2917, task5.loss_vel: 0.1894, task5.loss_heatmap: 1.0252, loss_depth: 7.2948, loss_semantic: 0.4146, loss: 18.1281, grad_norm: 18.6427
2024-05-16 09:00:25,979 - mmdet - INFO - Epoch [1][400/880]	lr: 1.000e-04, eta: 7:47:54, time: 1.295, data_time: 0.044, memory: 7466, task0.loss_xy: 0.1030, task0.loss_z: 0.0583, task0.loss_whl: 0.0586, task0.loss_yaw: 0.1269, task0.loss_vel: 0.3949, task0.loss_heatmap: 0.9913, task1.loss_xy: 0.1069, task1.loss_z: 0.0635, task1.loss_whl: 0.1020, task1.loss_yaw: 0.1327, task1.loss_vel: 0.3249, task1.loss_heatmap: 1.2954, task2.loss_xy: 0.1050, task2.loss_z: 0.0694, task2.loss_whl: 0.1049, task2.loss_yaw: 0.1332, task2.loss_vel: 0.4487, task2.loss_heatmap: 1.1435, task3.loss_xy: 0.0995, task3.loss_z: 0.0426, task3.loss_whl: 0.1117, task3.loss_yaw: 0.1818, task3.loss_vel: 0.0163, task3.loss_heatmap: 0.6767, task4.loss_xy: 0.0983, task4.loss_z: 0.0468, task4.loss_whl: 0.1010, task4.loss_yaw: 0.2456, task4.loss_vel: 0.2936, task4.loss_heatmap: 0.9018, task5.loss_xy: 0.0989, task5.loss_z: 0.0577, task5.loss_whl: 0.1338, task5.loss_yaw: 0.2901, task5.loss_vel: 0.1877, task5.loss_heatmap: 0.9969, loss_depth: 7.2141, loss_semantic: 0.4290, loss: 17.9871, grad_norm: 18.6511
2024-05-16 09:01:30,635 - mmdet - INFO - Epoch [1][450/880]	lr: 1.000e-04, eta: 7:44:24, time: 1.293, data_time: 0.046, memory: 7466, task0.loss_xy: 0.1018, task0.loss_z: 0.0562, task0.loss_whl: 0.0585, task0.loss_yaw: 0.1245, task0.loss_vel: 0.3785, task0.loss_heatmap: 0.9550, task1.loss_xy: 0.1075, task1.loss_z: 0.0680, task1.loss_whl: 0.1000, task1.loss_yaw: 0.1312, task1.loss_vel: 0.2956, task1.loss_heatmap: 1.2789, task2.loss_xy: 0.1087, task2.loss_z: 0.0665, task2.loss_whl: 0.1050, task2.loss_yaw: 0.1230, task2.loss_vel: 0.4218, task2.loss_heatmap: 1.0704, task3.loss_xy: 0.1009, task3.loss_z: 0.0406, task3.loss_whl: 0.1131, task3.loss_yaw: 0.1680, task3.loss_vel: 0.0175, task3.loss_heatmap: 0.6657, task4.loss_xy: 0.0994, task4.loss_z: 0.0450, task4.loss_whl: 0.1030, task4.loss_yaw: 0.2363, task4.loss_vel: 0.2604, task4.loss_heatmap: 0.8224, task5.loss_xy: 0.0978, task5.loss_z: 0.0555, task5.loss_whl: 0.1355, task5.loss_yaw: 0.2884, task5.loss_vel: 0.1869, task5.loss_heatmap: 0.9476, loss_depth: 7.2934, loss_semantic: 0.4260, loss: 17.6546, grad_norm: 18.0363
2024-05-16 09:02:36,011 - mmdet - INFO - Epoch [1][500/880]	lr: 1.000e-04, eta: 7:41:54, time: 1.308, data_time: 0.046, memory: 7466, task0.loss_xy: 0.1017, task0.loss_z: 0.0561, task0.loss_whl: 0.0585, task0.loss_yaw: 0.1190, task0.loss_vel: 0.3310, task0.loss_heatmap: 0.9275, task1.loss_xy: 0.1041, task1.loss_z: 0.0672, task1.loss_whl: 0.0990, task1.loss_yaw: 0.1298, task1.loss_vel: 0.2851, task1.loss_heatmap: 1.2299, task2.loss_xy: 0.1065, task2.loss_z: 0.0673, task2.loss_whl: 0.0970, task2.loss_yaw: 0.1173, task2.loss_vel: 0.4270, task2.loss_heatmap: 1.0439, task3.loss_xy: 0.0994, task3.loss_z: 0.0394, task3.loss_whl: 0.1056, task3.loss_yaw: 0.1562, task3.loss_vel: 0.0163, task3.loss_heatmap: 0.6472, task4.loss_xy: 0.0944, task4.loss_z: 0.0502, task4.loss_whl: 0.1022, task4.loss_yaw: 0.2256, task4.loss_vel: 0.2646, task4.loss_heatmap: 0.8353, task5.loss_xy: 0.0970, task5.loss_z: 0.0570, task5.loss_whl: 0.1338, task5.loss_yaw: 0.2907, task5.loss_vel: 0.1888, task5.loss_heatmap: 0.9367, loss_depth: 7.2555, loss_semantic: 0.4111, loss: 17.3752, grad_norm: 18.1761
2024-05-16 09:03:40,841 - mmdet - INFO - Epoch [1][550/880]	lr: 1.000e-04, eta: 7:39:17, time: 1.296, data_time: 0.045, memory: 7466, task0.loss_xy: 0.1010, task0.loss_z: 0.0549, task0.loss_whl: 0.0573, task0.loss_yaw: 0.1189, task0.loss_vel: 0.3250, task0.loss_heatmap: 0.9057, task1.loss_xy: 0.1072, task1.loss_z: 0.0644, task1.loss_whl: 0.1016, task1.loss_yaw: 0.1284, task1.loss_vel: 0.3080, task1.loss_heatmap: 1.2915, task2.loss_xy: 0.1062, task2.loss_z: 0.0628, task2.loss_whl: 0.0966, task2.loss_yaw: 0.1228, task2.loss_vel: 0.3905, task2.loss_heatmap: 1.1078, task3.loss_xy: 0.0978, task3.loss_z: 0.0382, task3.loss_whl: 0.1048, task3.loss_yaw: 0.1660, task3.loss_vel: 0.0146, task3.loss_heatmap: 0.6238, task4.loss_xy: 0.0959, task4.loss_z: 0.0457, task4.loss_whl: 0.1010, task4.loss_yaw: 0.2279, task4.loss_vel: 0.2944, task4.loss_heatmap: 0.8801, task5.loss_xy: 0.0968, task5.loss_z: 0.0560, task5.loss_whl: 0.1314, task5.loss_yaw: 0.2878, task5.loss_vel: 0.1852, task5.loss_heatmap: 0.9553, loss_depth: 7.2949, loss_semantic: 0.4215, loss: 17.5699, grad_norm: 17.3271
2024-05-16 09:04:45,900 - mmdet - INFO - Epoch [1][600/880]	lr: 1.000e-04, eta: 7:37:04, time: 1.301, data_time: 0.044, memory: 7466, task0.loss_xy: 0.0999, task0.loss_z: 0.0551, task0.loss_whl: 0.0569, task0.loss_yaw: 0.1161, task0.loss_vel: 0.3016, task0.loss_heatmap: 0.9048, task1.loss_xy: 0.1042, task1.loss_z: 0.0650, task1.loss_whl: 0.1006, task1.loss_yaw: 0.1237, task1.loss_vel: 0.2588, task1.loss_heatmap: 1.2110, task2.loss_xy: 0.1086, task2.loss_z: 0.0676, task2.loss_whl: 0.0978, task2.loss_yaw: 0.1112, task2.loss_vel: 0.3574, task2.loss_heatmap: 1.0840, task3.loss_xy: 0.0976, task3.loss_z: 0.0393, task3.loss_whl: 0.1024, task3.loss_yaw: 0.1534, task3.loss_vel: 0.0175, task3.loss_heatmap: 0.6403, task4.loss_xy: 0.0932, task4.loss_z: 0.0497, task4.loss_whl: 0.0981, task4.loss_yaw: 0.2228, task4.loss_vel: 0.2469, task4.loss_heatmap: 0.8951, task5.loss_xy: 0.0960, task5.loss_z: 0.0560, task5.loss_whl: 0.1341, task5.loss_yaw: 0.2889, task5.loss_vel: 0.1865, task5.loss_heatmap: 0.9249, loss_depth: 7.2300, loss_semantic: 0.4257, loss: 17.2227, grad_norm: 17.2464
2024-05-16 09:05:53,030 - mmdet - INFO - Epoch [1][650/880]	lr: 1.000e-04, eta: 7:36:07, time: 1.343, data_time: 0.044, memory: 7466, task0.loss_xy: 0.0998, task0.loss_z: 0.0542, task0.loss_whl: 0.0572, task0.loss_yaw: 0.1144, task0.loss_vel: 0.3176, task0.loss_heatmap: 0.9063, task1.loss_xy: 0.1058, task1.loss_z: 0.0657, task1.loss_whl: 0.0980, task1.loss_yaw: 0.1247, task1.loss_vel: 0.2701, task1.loss_heatmap: 1.2214, task2.loss_xy: 0.1083, task2.loss_z: 0.0667, task2.loss_whl: 0.0947, task2.loss_yaw: 0.1236, task2.loss_vel: 0.3272, task2.loss_heatmap: 1.1001, task3.loss_xy: 0.0985, task3.loss_z: 0.0401, task3.loss_whl: 0.1011, task3.loss_yaw: 0.1698, task3.loss_vel: 0.0166, task3.loss_heatmap: 0.6600, task4.loss_xy: 0.0922, task4.loss_z: 0.0472, task4.loss_whl: 0.0964, task4.loss_yaw: 0.2271, task4.loss_vel: 0.2724, task4.loss_heatmap: 0.8582, task5.loss_xy: 0.0960, task5.loss_z: 0.0569, task5.loss_whl: 0.1297, task5.loss_yaw: 0.2892, task5.loss_vel: 0.1868, task5.loss_heatmap: 0.9246, loss_depth: 7.3473, loss_semantic: 0.4182, loss: 17.3839, grad_norm: 23.0321
2024-05-16 09:06:57,156 - mmdet - INFO - Epoch [1][700/880]	lr: 1.000e-04, eta: 7:33:40, time: 1.282, data_time: 0.043, memory: 7466, task0.loss_xy: 0.0990, task0.loss_z: 0.0539, task0.loss_whl: 0.0562, task0.loss_yaw: 0.1161, task0.loss_vel: 0.2842, task0.loss_heatmap: 0.8936, task1.loss_xy: 0.1073, task1.loss_z: 0.0644, task1.loss_whl: 0.0971, task1.loss_yaw: 0.1237, task1.loss_vel: 0.2366, task1.loss_heatmap: 1.2430, task2.loss_xy: 0.1065, task2.loss_z: 0.0585, task2.loss_whl: 0.0919, task2.loss_yaw: 0.1117, task2.loss_vel: 0.2991, task2.loss_heatmap: 1.0369, task3.loss_xy: 0.0969, task3.loss_z: 0.0360, task3.loss_whl: 0.1063, task3.loss_yaw: 0.1592, task3.loss_vel: 0.0181, task3.loss_heatmap: 0.6449, task4.loss_xy: 0.0904, task4.loss_z: 0.0453, task4.loss_whl: 0.0939, task4.loss_yaw: 0.2200, task4.loss_vel: 0.2681, task4.loss_heatmap: 0.8416, task5.loss_xy: 0.0941, task5.loss_z: 0.0554, task5.loss_whl: 0.1314, task5.loss_yaw: 0.2890, task5.loss_vel: 0.1877, task5.loss_heatmap: 0.9172, loss_depth: 7.3407, loss_semantic: 0.4284, loss: 17.1445, grad_norm: 16.9957
2024-05-16 09:08:01,099 - mmdet - INFO - Epoch [1][750/880]	lr: 1.000e-04, eta: 7:31:20, time: 1.279, data_time: 0.044, memory: 7466, task0.loss_xy: 0.0985, task0.loss_z: 0.0523, task0.loss_whl: 0.0561, task0.loss_yaw: 0.1119, task0.loss_vel: 0.3028, task0.loss_heatmap: 0.8709, task1.loss_xy: 0.1071, task1.loss_z: 0.0636, task1.loss_whl: 0.0967, task1.loss_yaw: 0.1220, task1.loss_vel: 0.2401, task1.loss_heatmap: 1.2210, task2.loss_xy: 0.1062, task2.loss_z: 0.0675, task2.loss_whl: 0.0985, task2.loss_yaw: 0.1180, task2.loss_vel: 0.2953, task2.loss_heatmap: 1.1208, task3.loss_xy: 0.0955, task3.loss_z: 0.0380, task3.loss_whl: 0.1021, task3.loss_yaw: 0.1587, task3.loss_vel: 0.0176, task3.loss_heatmap: 0.6142, task4.loss_xy: 0.0959, task4.loss_z: 0.0484, task4.loss_whl: 0.0940, task4.loss_yaw: 0.2130, task4.loss_vel: 0.2784, task4.loss_heatmap: 0.8451, task5.loss_xy: 0.0941, task5.loss_z: 0.0550, task5.loss_whl: 0.1293, task5.loss_yaw: 0.2886, task5.loss_vel: 0.1893, task5.loss_heatmap: 0.8914, loss_depth: 7.2674, loss_semantic: 0.4363, loss: 17.1020, grad_norm: 17.3705
2024-05-16 09:09:05,167 - mmdet - INFO - Epoch [1][800/880]	lr: 1.000e-04, eta: 7:29:12, time: 1.281, data_time: 0.043, memory: 7466, task0.loss_xy: 0.0981, task0.loss_z: 0.0521, task0.loss_whl: 0.0556, task0.loss_yaw: 0.1092, task0.loss_vel: 0.3113, task0.loss_heatmap: 0.8737, task1.loss_xy: 0.1027, task1.loss_z: 0.0607, task1.loss_whl: 0.0960, task1.loss_yaw: 0.1127, task1.loss_vel: 0.2561, task1.loss_heatmap: 1.1424, task2.loss_xy: 0.1034, task2.loss_z: 0.0652, task2.loss_whl: 0.0948, task2.loss_yaw: 0.1197, task2.loss_vel: 0.3007, task2.loss_heatmap: 1.0474, task3.loss_xy: 0.0985, task3.loss_z: 0.0382, task3.loss_whl: 0.1026, task3.loss_yaw: 0.1661, task3.loss_vel: 0.0172, task3.loss_heatmap: 0.6580, task4.loss_xy: 0.0930, task4.loss_z: 0.0481, task4.loss_whl: 0.0984, task4.loss_yaw: 0.2100, task4.loss_vel: 0.2568, task4.loss_heatmap: 0.7969, task5.loss_xy: 0.0924, task5.loss_z: 0.0537, task5.loss_whl: 0.1282, task5.loss_yaw: 0.2893, task5.loss_vel: 0.1927, task5.loss_heatmap: 0.8841, loss_depth: 7.2688, loss_semantic: 0.4185, loss: 16.9133, grad_norm: 17.5083
2024-05-16 09:10:10,370 - mmdet - INFO - Epoch [1][850/880]	lr: 1.000e-04, eta: 7:27:40, time: 1.305, data_time: 0.046, memory: 7466, task0.loss_xy: 0.0980, task0.loss_z: 0.0532, task0.loss_whl: 0.0561, task0.loss_yaw: 0.1123, task0.loss_vel: 0.2811, task0.loss_heatmap: 0.8553, task1.loss_xy: 0.1038, task1.loss_z: 0.0615, task1.loss_whl: 0.0935, task1.loss_yaw: 0.1195, task1.loss_vel: 0.2402, task1.loss_heatmap: 1.1746, task2.loss_xy: 0.1058, task2.loss_z: 0.0603, task2.loss_whl: 0.0967, task2.loss_yaw: 0.1178, task2.loss_vel: 0.3334, task2.loss_heatmap: 1.0745, task3.loss_xy: 0.0946, task3.loss_z: 0.0384, task3.loss_whl: 0.1002, task3.loss_yaw: 0.1416, task3.loss_vel: 0.0149, task3.loss_heatmap: 0.6010, task4.loss_xy: 0.0928, task4.loss_z: 0.0491, task4.loss_whl: 0.0955, task4.loss_yaw: 0.2157, task4.loss_vel: 0.2612, task4.loss_heatmap: 0.8171, task5.loss_xy: 0.0918, task5.loss_z: 0.0535, task5.loss_whl: 0.1324, task5.loss_yaw: 0.2864, task5.loss_vel: 0.1788, task5.loss_heatmap: 0.8656, loss_depth: 7.1573, loss_semantic: 0.4218, loss: 16.7474, grad_norm: 17.2407
2024-05-16 09:10:49,216 - mmdet - INFO - Saving checkpoint at 1 epochs
2024-05-16 09:10:52,397 - mmdet - INFO - Saving ema checkpoint at /gpfsdata/home/huliang/bev/multi-SA-BEV/work_dirs/my-sabev-r50/epoch_1_ema.pth
2024-05-16 09:12:04,784 - mmdet - INFO - Epoch [2][50/880]	lr: 1.000e-04, eta: 7:13:43, time: 1.447, data_time: 0.197, memory: 7466, task0.loss_xy: 0.0970, task0.loss_z: 0.0512, task0.loss_whl: 0.0547, task0.loss_yaw: 0.1078, task0.loss_vel: 0.2804, task0.loss_heatmap: 0.8399, task1.loss_xy: 0.1030, task1.loss_z: 0.0611, task1.loss_whl: 0.0916, task1.loss_yaw: 0.1147, task1.loss_vel: 0.2404, task1.loss_heatmap: 1.1140, task2.loss_xy: 0.1003, task2.loss_z: 0.0640, task2.loss_whl: 0.0913, task2.loss_yaw: 0.1022, task2.loss_vel: 0.2827, task2.loss_heatmap: 0.9519, task3.loss_xy: 0.0946, task3.loss_z: 0.0373, task3.loss_whl: 0.0973, task3.loss_yaw: 0.1575, task3.loss_vel: 0.0177, task3.loss_heatmap: 0.5782, task4.loss_xy: 0.0925, task4.loss_z: 0.0447, task4.loss_whl: 0.0981, task4.loss_yaw: 0.2141, task4.loss_vel: 0.1990, task4.loss_heatmap: 0.7876, task5.loss_xy: 0.0906, task5.loss_z: 0.0522, task5.loss_whl: 0.1291, task5.loss_yaw: 0.2860, task5.loss_vel: 0.1862, task5.loss_heatmap: 0.8501, loss_depth: 7.2786, loss_semantic: 0.4163, loss: 16.4557, grad_norm: 16.5836
2024-05-16 09:13:09,629 - mmdet - INFO - Epoch [2][100/880]	lr: 1.000e-04, eta: 7:12:46, time: 1.296, data_time: 0.040, memory: 7466, task0.loss_xy: 0.0964, task0.loss_z: 0.0518, task0.loss_whl: 0.0556, task0.loss_yaw: 0.1060, task0.loss_vel: 0.2674, task0.loss_heatmap: 0.8150, task1.loss_xy: 0.1028, task1.loss_z: 0.0634, task1.loss_whl: 0.0924, task1.loss_yaw: 0.1133, task1.loss_vel: 0.2045, task1.loss_heatmap: 1.1060, task2.loss_xy: 0.1069, task2.loss_z: 0.0575, task2.loss_whl: 0.0868, task2.loss_yaw: 0.1053, task2.loss_vel: 0.2884, task2.loss_heatmap: 0.9419, task3.loss_xy: 0.0947, task3.loss_z: 0.0372, task3.loss_whl: 0.1068, task3.loss_yaw: 0.1481, task3.loss_vel: 0.0156, task3.loss_heatmap: 0.5960, task4.loss_xy: 0.0925, task4.loss_z: 0.0435, task4.loss_whl: 0.0939, task4.loss_yaw: 0.2110, task4.loss_vel: 0.2237, task4.loss_heatmap: 0.6779, task5.loss_xy: 0.0907, task5.loss_z: 0.0529, task5.loss_whl: 0.1282, task5.loss_yaw: 0.2861, task5.loss_vel: 0.1866, task5.loss_heatmap: 0.8444, loss_depth: 7.1884, loss_semantic: 0.4255, loss: 16.2051, grad_norm: 15.7412
2024-05-16 09:14:15,546 - mmdet - INFO - Epoch [2][150/880]	lr: 1.000e-04, eta: 7:12:11, time: 1.320, data_time: 0.039, memory: 7466, task0.loss_xy: 0.0956, task0.loss_z: 0.0508, task0.loss_whl: 0.0543, task0.loss_yaw: 0.1057, task0.loss_vel: 0.2809, task0.loss_heatmap: 0.8314, task1.loss_xy: 0.1024, task1.loss_z: 0.0593, task1.loss_whl: 0.0924, task1.loss_yaw: 0.1132, task1.loss_vel: 0.2147, task1.loss_heatmap: 1.1042, task2.loss_xy: 0.1039, task2.loss_z: 0.0605, task2.loss_whl: 0.0913, task2.loss_yaw: 0.0975, task2.loss_vel: 0.2790, task2.loss_heatmap: 0.8545, task3.loss_xy: 0.0948, task3.loss_z: 0.0356, task3.loss_whl: 0.0958, task3.loss_yaw: 0.1576, task3.loss_vel: 0.0161, task3.loss_heatmap: 0.6174, task4.loss_xy: 0.0904, task4.loss_z: 0.0444, task4.loss_whl: 0.0892, task4.loss_yaw: 0.2030, task4.loss_vel: 0.2145, task4.loss_heatmap: 0.7250, task5.loss_xy: 0.0913, task5.loss_z: 0.0534, task5.loss_whl: 0.1272, task5.loss_yaw: 0.2849, task5.loss_vel: 0.1787, task5.loss_heatmap: 0.8608, loss_depth: 7.2147, loss_semantic: 0.4338, loss: 16.2201, grad_norm: 16.4059
2024-05-16 09:15:22,150 - mmdet - INFO - Epoch [2][200/880]	lr: 1.000e-04, eta: 7:11:45, time: 1.332, data_time: 0.039, memory: 7466, task0.loss_xy: 0.0963, task0.loss_z: 0.0541, task0.loss_whl: 0.0548, task0.loss_yaw: 0.1068, task0.loss_vel: 0.2950, task0.loss_heatmap: 0.8225, task1.loss_xy: 0.1034, task1.loss_z: 0.0633, task1.loss_whl: 0.0937, task1.loss_yaw: 0.1114, task1.loss_vel: 0.2419, task1.loss_heatmap: 1.1460, task2.loss_xy: 0.1032, task2.loss_z: 0.0585, task2.loss_whl: 0.0889, task2.loss_yaw: 0.1005, task2.loss_vel: 0.2901, task2.loss_heatmap: 0.9781, task3.loss_xy: 0.0932, task3.loss_z: 0.0365, task3.loss_whl: 0.0952, task3.loss_yaw: 0.1401, task3.loss_vel: 0.0169, task3.loss_heatmap: 0.5807, task4.loss_xy: 0.0913, task4.loss_z: 0.0465, task4.loss_whl: 0.0942, task4.loss_yaw: 0.1993, task4.loss_vel: 0.2449, task4.loss_heatmap: 0.7764, task5.loss_xy: 0.0901, task5.loss_z: 0.0530, task5.loss_whl: 0.1281, task5.loss_yaw: 0.2892, task5.loss_vel: 0.1922, task5.loss_heatmap: 0.8479, loss_depth: 7.2373, loss_semantic: 0.4224, loss: 16.4838, grad_norm: 16.6889
2024-05-16 09:16:26,957 - mmdet - INFO - Epoch [2][250/880]	lr: 1.000e-04, eta: 7:10:43, time: 1.296, data_time: 0.039, memory: 7468, task0.loss_xy: 0.0954, task0.loss_z: 0.0509, task0.loss_whl: 0.0543, task0.loss_yaw: 0.1034, task0.loss_vel: 0.2804, task0.loss_heatmap: 0.8016, task1.loss_xy: 0.1010, task1.loss_z: 0.0626, task1.loss_whl: 0.0924, task1.loss_yaw: 0.1124, task1.loss_vel: 0.2344, task1.loss_heatmap: 1.1052, task2.loss_xy: 0.1048, task2.loss_z: 0.0619, task2.loss_whl: 0.0877, task2.loss_yaw: 0.0972, task2.loss_vel: 0.2713, task2.loss_heatmap: 0.9193, task3.loss_xy: 0.0927, task3.loss_z: 0.0348, task3.loss_whl: 0.1017, task3.loss_yaw: 0.1585, task3.loss_vel: 0.0150, task3.loss_heatmap: 0.5573, task4.loss_xy: 0.0893, task4.loss_z: 0.0438, task4.loss_whl: 0.0908, task4.loss_yaw: 0.2047, task4.loss_vel: 0.2349, task4.loss_heatmap: 0.7134, task5.loss_xy: 0.0888, task5.loss_z: 0.0528, task5.loss_whl: 0.1320, task5.loss_yaw: 0.2866, task5.loss_vel: 0.1817, task5.loss_heatmap: 0.8564, loss_depth: 7.1552, loss_semantic: 0.4330, loss: 16.1596, grad_norm: 15.5374
2024-05-16 09:17:32,137 - mmdet - INFO - Epoch [2][300/880]	lr: 1.000e-04, eta: 7:09:46, time: 1.302, data_time: 0.039, memory: 7468, task0.loss_xy: 0.0947, task0.loss_z: 0.0503, task0.loss_whl: 0.0549, task0.loss_yaw: 0.1019, task0.loss_vel: 0.2676, task0.loss_heatmap: 0.8082, task1.loss_xy: 0.1012, task1.loss_z: 0.0601, task1.loss_whl: 0.0915, task1.loss_yaw: 0.1098, task1.loss_vel: 0.2109, task1.loss_heatmap: 1.1032, task2.loss_xy: 0.1063, task2.loss_z: 0.0605, task2.loss_whl: 0.0878, task2.loss_yaw: 0.1009, task2.loss_vel: 0.2581, task2.loss_heatmap: 0.8829, task3.loss_xy: 0.0940, task3.loss_z: 0.0351, task3.loss_whl: 0.0966, task3.loss_yaw: 0.1394, task3.loss_vel: 0.0169, task3.loss_heatmap: 0.6066, task4.loss_xy: 0.0920, task4.loss_z: 0.0425, task4.loss_whl: 0.0893, task4.loss_yaw: 0.1919, task4.loss_vel: 0.2011, task4.loss_heatmap: 0.6637, task5.loss_xy: 0.0883, task5.loss_z: 0.0519, task5.loss_whl: 0.1242, task5.loss_yaw: 0.2864, task5.loss_vel: 0.1920, task5.loss_heatmap: 0.8227, loss_depth: 7.2238, loss_semantic: 0.4310, loss: 16.0402, grad_norm: 17.6562
2024-05-16 09:18:36,472 - mmdet - INFO - Epoch [2][350/880]	lr: 1.000e-04, eta: 7:08:37, time: 1.288, data_time: 0.041, memory: 7468, task0.loss_xy: 0.0944, task0.loss_z: 0.0518, task0.loss_whl: 0.0541, task0.loss_yaw: 0.1030, task0.loss_vel: 0.2732, task0.loss_heatmap: 0.7896, task1.loss_xy: 0.1005, task1.loss_z: 0.0598, task1.loss_whl: 0.0901, task1.loss_yaw: 0.1140, task1.loss_vel: 0.2265, task1.loss_heatmap: 1.0881, task2.loss_xy: 0.1053, task2.loss_z: 0.0573, task2.loss_whl: 0.0888, task2.loss_yaw: 0.1070, task2.loss_vel: 0.2832, task2.loss_heatmap: 0.9643, task3.loss_xy: 0.0938, task3.loss_z: 0.0366, task3.loss_whl: 0.0960, task3.loss_yaw: 0.1428, task3.loss_vel: 0.0176, task3.loss_heatmap: 0.5955, task4.loss_xy: 0.0901, task4.loss_z: 0.0429, task4.loss_whl: 0.0950, task4.loss_yaw: 0.2024, task4.loss_vel: 0.2173, task4.loss_heatmap: 0.7302, task5.loss_xy: 0.0883, task5.loss_z: 0.0514, task5.loss_whl: 0.1290, task5.loss_yaw: 0.2852, task5.loss_vel: 0.1848, task5.loss_heatmap: 0.8111, loss_depth: 7.1876, loss_semantic: 0.4203, loss: 16.1691, grad_norm: 16.9028
2024-05-16 09:19:40,249 - mmdet - INFO - Epoch [2][400/880]	lr: 1.000e-04, eta: 7:07:19, time: 1.276, data_time: 0.039, memory: 7468, task0.loss_xy: 0.0955, task0.loss_z: 0.0515, task0.loss_whl: 0.0548, task0.loss_yaw: 0.1069, task0.loss_vel: 0.2613, task0.loss_heatmap: 0.8196, task1.loss_xy: 0.1023, task1.loss_z: 0.0599, task1.loss_whl: 0.0919, task1.loss_yaw: 0.1109, task1.loss_vel: 0.2196, task1.loss_heatmap: 1.1329, task2.loss_xy: 0.1058, task2.loss_z: 0.0625, task2.loss_whl: 0.0900, task2.loss_yaw: 0.0957, task2.loss_vel: 0.2843, task2.loss_heatmap: 0.9344, task3.loss_xy: 0.0928, task3.loss_z: 0.0362, task3.loss_whl: 0.0970, task3.loss_yaw: 0.1414, task3.loss_vel: 0.0185, task3.loss_heatmap: 0.5945, task4.loss_xy: 0.0914, task4.loss_z: 0.0419, task4.loss_whl: 0.0926, task4.loss_yaw: 0.1929, task4.loss_vel: 0.1932, task4.loss_heatmap: 0.6839, task5.loss_xy: 0.0892, task5.loss_z: 0.0522, task5.loss_whl: 0.1277, task5.loss_yaw: 0.2858, task5.loss_vel: 0.1865, task5.loss_heatmap: 0.8288, loss_depth: 7.3326, loss_semantic: 0.4171, loss: 16.2757, grad_norm: 16.1774
2024-05-16 09:20:44,677 - mmdet - INFO - Epoch [2][450/880]	lr: 1.000e-04, eta: 7:06:12, time: 1.289, data_time: 0.040, memory: 7468, task0.loss_xy: 0.0945, task0.loss_z: 0.0498, task0.loss_whl: 0.0540, task0.loss_yaw: 0.1013, task0.loss_vel: 0.2528, task0.loss_heatmap: 0.7852, task1.loss_xy: 0.1010, task1.loss_z: 0.0583, task1.loss_whl: 0.0897, task1.loss_yaw: 0.1104, task1.loss_vel: 0.2123, task1.loss_heatmap: 1.0723, task2.loss_xy: 0.1017, task2.loss_z: 0.0603, task2.loss_whl: 0.0880, task2.loss_yaw: 0.1022, task2.loss_vel: 0.2357, task2.loss_heatmap: 0.9332, task3.loss_xy: 0.0929, task3.loss_z: 0.0348, task3.loss_whl: 0.0964, task3.loss_yaw: 0.1442, task3.loss_vel: 0.0162, task3.loss_heatmap: 0.5844, task4.loss_xy: 0.0878, task4.loss_z: 0.0411, task4.loss_whl: 0.0950, task4.loss_yaw: 0.2008, task4.loss_vel: 0.2171, task4.loss_heatmap: 0.7019, task5.loss_xy: 0.0884, task5.loss_z: 0.0519, task5.loss_whl: 0.1290, task5.loss_yaw: 0.2845, task5.loss_vel: 0.1839, task5.loss_heatmap: 0.8105, loss_depth: 7.2230, loss_semantic: 0.4162, loss: 16.0026, grad_norm: 16.1557
2024-05-16 09:21:48,284 - mmdet - INFO - Epoch [2][500/880]	lr: 1.000e-04, eta: 7:04:53, time: 1.272, data_time: 0.039, memory: 7468, task0.loss_xy: 0.0946, task0.loss_z: 0.0512, task0.loss_whl: 0.0544, task0.loss_yaw: 0.1024, task0.loss_vel: 0.2855, task0.loss_heatmap: 0.7930, task1.loss_xy: 0.1007, task1.loss_z: 0.0607, task1.loss_whl: 0.0899, task1.loss_yaw: 0.1056, task1.loss_vel: 0.2095, task1.loss_heatmap: 1.0395, task2.loss_xy: 0.0995, task2.loss_z: 0.0578, task2.loss_whl: 0.0843, task2.loss_yaw: 0.0915, task2.loss_vel: 0.2456, task2.loss_heatmap: 0.8517, task3.loss_xy: 0.0934, task3.loss_z: 0.0344, task3.loss_whl: 0.1007, task3.loss_yaw: 0.1644, task3.loss_vel: 0.0154, task3.loss_heatmap: 0.5900, task4.loss_xy: 0.0915, task4.loss_z: 0.0429, task4.loss_whl: 0.0890, task4.loss_yaw: 0.1937, task4.loss_vel: 0.2305, task4.loss_heatmap: 0.7517, task5.loss_xy: 0.0883, task5.loss_z: 0.0530, task5.loss_whl: 0.1276, task5.loss_yaw: 0.2848, task5.loss_vel: 0.1863, task5.loss_heatmap: 0.8193, loss_depth: 7.2634, loss_semantic: 0.4274, loss: 16.0652, grad_norm: 16.3945
2024-05-16 09:22:52,752 - mmdet - INFO - Epoch [2][550/880]	lr: 1.000e-04, eta: 7:03:47, time: 1.290, data_time: 0.039, memory: 7468, task0.loss_xy: 0.0945, task0.loss_z: 0.0530, task0.loss_whl: 0.0547, task0.loss_yaw: 0.1031, task0.loss_vel: 0.2754, task0.loss_heatmap: 0.7951, task1.loss_xy: 0.1008, task1.loss_z: 0.0617, task1.loss_whl: 0.0920, task1.loss_yaw: 0.1081, task1.loss_vel: 0.2018, task1.loss_heatmap: 1.0878, task2.loss_xy: 0.1006, task2.loss_z: 0.0576, task2.loss_whl: 0.0862, task2.loss_yaw: 0.0993, task2.loss_vel: 0.2382, task2.loss_heatmap: 0.9347, task3.loss_xy: 0.0942, task3.loss_z: 0.0377, task3.loss_whl: 0.0993, task3.loss_yaw: 0.1454, task3.loss_vel: 0.0158, task3.loss_heatmap: 0.5845, task4.loss_xy: 0.0924, task4.loss_z: 0.0471, task4.loss_whl: 0.0903, task4.loss_yaw: 0.2011, task4.loss_vel: 0.1941, task4.loss_heatmap: 0.7015, task5.loss_xy: 0.0882, task5.loss_z: 0.0523, task5.loss_whl: 0.1273, task5.loss_yaw: 0.2861, task5.loss_vel: 0.1891, task5.loss_heatmap: 0.8200, loss_depth: 7.2242, loss_semantic: 0.4178, loss: 16.0530, grad_norm: 15.9849
2024-05-16 09:23:56,775 - mmdet - INFO - Epoch [2][600/880]	lr: 1.000e-04, eta: 7:02:35, time: 1.280, data_time: 0.038, memory: 7468, task0.loss_xy: 0.0935, task0.loss_z: 0.0508, task0.loss_whl: 0.0531, task0.loss_yaw: 0.1013, task0.loss_vel: 0.2826, task0.loss_heatmap: 0.7781, task1.loss_xy: 0.1005, task1.loss_z: 0.0620, task1.loss_whl: 0.0894, task1.loss_yaw: 0.1027, task1.loss_vel: 0.2261, task1.loss_heatmap: 1.0713, task2.loss_xy: 0.1036, task2.loss_z: 0.0581, task2.loss_whl: 0.0895, task2.loss_yaw: 0.1053, task2.loss_vel: 0.2498, task2.loss_heatmap: 0.8662, task3.loss_xy: 0.0928, task3.loss_z: 0.0359, task3.loss_whl: 0.0986, task3.loss_yaw: 0.1477, task3.loss_vel: 0.0187, task3.loss_heatmap: 0.5762, task4.loss_xy: 0.0894, task4.loss_z: 0.0423, task4.loss_whl: 0.0945, task4.loss_yaw: 0.1943, task4.loss_vel: 0.2314, task4.loss_heatmap: 0.7649, task5.loss_xy: 0.0876, task5.loss_z: 0.0516, task5.loss_whl: 0.1288, task5.loss_yaw: 0.2854, task5.loss_vel: 0.1864, task5.loss_heatmap: 0.8272, loss_depth: 7.2953, loss_semantic: 0.4205, loss: 16.1535, grad_norm: 16.7268
2024-05-16 09:25:03,358 - mmdet - INFO - Epoch [2][650/880]	lr: 1.000e-04, eta: 7:01:56, time: 1.332, data_time: 0.038, memory: 7468, task0.loss_xy: 0.0938, task0.loss_z: 0.0511, task0.loss_whl: 0.0534, task0.loss_yaw: 0.0978, task0.loss_vel: 0.2808, task0.loss_heatmap: 0.7647, task1.loss_xy: 0.1006, task1.loss_z: 0.0613, task1.loss_whl: 0.0906, task1.loss_yaw: 0.1077, task1.loss_vel: 0.2143, task1.loss_heatmap: 1.1176, task2.loss_xy: 0.1018, task2.loss_z: 0.0597, task2.loss_whl: 0.0846, task2.loss_yaw: 0.0887, task2.loss_vel: 0.2807, task2.loss_heatmap: 0.8667, task3.loss_xy: 0.0939, task3.loss_z: 0.0335, task3.loss_whl: 0.0960, task3.loss_yaw: 0.1405, task3.loss_vel: 0.0166, task3.loss_heatmap: 0.5485, task4.loss_xy: 0.0897, task4.loss_z: 0.0392, task4.loss_whl: 0.0932, task4.loss_yaw: 0.1937, task4.loss_vel: 0.2154, task4.loss_heatmap: 0.7264, task5.loss_xy: 0.0872, task5.loss_z: 0.0510, task5.loss_whl: 0.1274, task5.loss_yaw: 0.2854, task5.loss_vel: 0.1850, task5.loss_heatmap: 0.8022, loss_depth: 7.2248, loss_semantic: 0.4085, loss: 15.9741, grad_norm: 16.0389
2024-05-16 09:26:07,270 - mmdet - INFO - Epoch [2][700/880]	lr: 1.000e-04, eta: 7:00:43, time: 1.279, data_time: 0.038, memory: 7468, task0.loss_xy: 0.0930, task0.loss_z: 0.0507, task0.loss_whl: 0.0535, task0.loss_yaw: 0.0979, task0.loss_vel: 0.2629, task0.loss_heatmap: 0.7794, task1.loss_xy: 0.1006, task1.loss_z: 0.0605, task1.loss_whl: 0.0914, task1.loss_yaw: 0.1099, task1.loss_vel: 0.2210, task1.loss_heatmap: 1.0743, task2.loss_xy: 0.1023, task2.loss_z: 0.0595, task2.loss_whl: 0.0866, task2.loss_yaw: 0.0937, task2.loss_vel: 0.2525, task2.loss_heatmap: 0.8716, task3.loss_xy: 0.0933, task3.loss_z: 0.0362, task3.loss_whl: 0.0947, task3.loss_yaw: 0.1442, task3.loss_vel: 0.0161, task3.loss_heatmap: 0.5699, task4.loss_xy: 0.0901, task4.loss_z: 0.0415, task4.loss_whl: 0.0884, task4.loss_yaw: 0.1897, task4.loss_vel: 0.1929, task4.loss_heatmap: 0.6697, task5.loss_xy: 0.0871, task5.loss_z: 0.0502, task5.loss_whl: 0.1244, task5.loss_yaw: 0.2860, task5.loss_vel: 0.1928, task5.loss_heatmap: 0.7896, loss_depth: 7.1917, loss_semantic: 0.4251, loss: 15.8349, grad_norm: 15.9811
2024-05-16 09:27:10,808 - mmdet - INFO - Epoch [2][750/880]	lr: 1.000e-04, eta: 6:59:25, time: 1.270, data_time: 0.039, memory: 7468, task0.loss_xy: 0.0930, task0.loss_z: 0.0505, task0.loss_whl: 0.0535, task0.loss_yaw: 0.0992, task0.loss_vel: 0.2748, task0.loss_heatmap: 0.7600, task1.loss_xy: 0.0984, task1.loss_z: 0.0591, task1.loss_whl: 0.0907, task1.loss_yaw: 0.1055, task1.loss_vel: 0.2374, task1.loss_heatmap: 1.0206, task2.loss_xy: 0.1005, task2.loss_z: 0.0562, task2.loss_whl: 0.0848, task2.loss_yaw: 0.0983, task2.loss_vel: 0.2421, task2.loss_heatmap: 0.8406, task3.loss_xy: 0.0929, task3.loss_z: 0.0363, task3.loss_whl: 0.0907, task3.loss_yaw: 0.1349, task3.loss_vel: 0.0172, task3.loss_heatmap: 0.5524, task4.loss_xy: 0.0899, task4.loss_z: 0.0413, task4.loss_whl: 0.0910, task4.loss_yaw: 0.1896, task4.loss_vel: 0.1868, task4.loss_heatmap: 0.6690, task5.loss_xy: 0.0866, task5.loss_z: 0.0508, task5.loss_whl: 0.1236, task5.loss_yaw: 0.2828, task5.loss_vel: 0.1905, task5.loss_heatmap: 0.7722, loss_depth: 7.1929, loss_semantic: 0.4157, loss: 15.6723, grad_norm: 16.4067
2024-05-16 09:28:14,526 - mmdet - INFO - Epoch [2][800/880]	lr: 1.000e-04, eta: 6:58:11, time: 1.275, data_time: 0.039, memory: 7468, task0.loss_xy: 0.0935, task0.loss_z: 0.0519, task0.loss_whl: 0.0537, task0.loss_yaw: 0.1030, task0.loss_vel: 0.2731, task0.loss_heatmap: 0.7892, task1.loss_xy: 0.1011, task1.loss_z: 0.0607, task1.loss_whl: 0.0894, task1.loss_yaw: 0.1096, task1.loss_vel: 0.2130, task1.loss_heatmap: 1.0897, task2.loss_xy: 0.1013, task2.loss_z: 0.0579, task2.loss_whl: 0.0833, task2.loss_yaw: 0.0888, task2.loss_vel: 0.2283, task2.loss_heatmap: 0.8875, task3.loss_xy: 0.0917, task3.loss_z: 0.0334, task3.loss_whl: 0.0939, task3.loss_yaw: 0.1366, task3.loss_vel: 0.0173, task3.loss_heatmap: 0.5671, task4.loss_xy: 0.0892, task4.loss_z: 0.0426, task4.loss_whl: 0.0916, task4.loss_yaw: 0.1889, task4.loss_vel: 0.2068, task4.loss_heatmap: 0.6995, task5.loss_xy: 0.0871, task5.loss_z: 0.0511, task5.loss_whl: 0.1229, task5.loss_yaw: 0.2861, task5.loss_vel: 0.1824, task5.loss_heatmap: 0.8000, loss_depth: 7.2970, loss_semantic: 0.4174, loss: 15.9779, grad_norm: 18.6956
2024-05-16 09:29:18,423 - mmdet - INFO - Epoch [2][850/880]	lr: 1.000e-04, eta: 6:57:00, time: 1.278, data_time: 0.039, memory: 7468, task0.loss_xy: 0.0916, task0.loss_z: 0.0498, task0.loss_whl: 0.0540, task0.loss_yaw: 0.0963, task0.loss_vel: 0.2533, task0.loss_heatmap: 0.7502, task1.loss_xy: 0.1000, task1.loss_z: 0.0585, task1.loss_whl: 0.0874, task1.loss_yaw: 0.1043, task1.loss_vel: 0.2098, task1.loss_heatmap: 1.0631, task2.loss_xy: 0.1017, task2.loss_z: 0.0568, task2.loss_whl: 0.0875, task2.loss_yaw: 0.0991, task2.loss_vel: 0.2269, task2.loss_heatmap: 0.9122, task3.loss_xy: 0.0917, task3.loss_z: 0.0336, task3.loss_whl: 0.0945, task3.loss_yaw: 0.1302, task3.loss_vel: 0.0158, task3.loss_heatmap: 0.5405, task4.loss_xy: 0.0927, task4.loss_z: 0.0439, task4.loss_whl: 0.0903, task4.loss_yaw: 0.1906, task4.loss_vel: 0.1838, task4.loss_heatmap: 0.6901, task5.loss_xy: 0.0860, task5.loss_z: 0.0511, task5.loss_whl: 0.1251, task5.loss_yaw: 0.2865, task5.loss_vel: 0.1901, task5.loss_heatmap: 0.7817, loss_depth: 7.2083, loss_semantic: 0.4148, loss: 15.7437, grad_norm: 16.1489
2024-05-16 09:29:56,463 - mmdet - INFO - Saving checkpoint at 2 epochs
2024-05-16 09:29:59,992 - mmdet - INFO - Saving ema checkpoint at /gpfsdata/home/huliang/bev/multi-SA-BEV/work_dirs/my-sabev-r50/epoch_2_ema.pth
2024-05-16 09:31:13,984 - mmdet - INFO - Epoch [3][50/880]	lr: 1.000e-04, eta: 6:50:04, time: 1.479, data_time: 0.192, memory: 7468, task0.loss_xy: 0.0920, task0.loss_z: 0.0494, task0.loss_whl: 0.0532, task0.loss_yaw: 0.0979, task0.loss_vel: 0.2591, task0.loss_heatmap: 0.7515, task1.loss_xy: 0.1017, task1.loss_z: 0.0603, task1.loss_whl: 0.0891, task1.loss_yaw: 0.1042, task1.loss_vel: 0.1924, task1.loss_heatmap: 1.0569, task2.loss_xy: 0.1035, task2.loss_z: 0.0531, task2.loss_whl: 0.0834, task2.loss_yaw: 0.0950, task2.loss_vel: 0.2095, task2.loss_heatmap: 0.7858, task3.loss_xy: 0.0907, task3.loss_z: 0.0361, task3.loss_whl: 0.0946, task3.loss_yaw: 0.1487, task3.loss_vel: 0.0173, task3.loss_heatmap: 0.5503, task4.loss_xy: 0.0894, task4.loss_z: 0.0438, task4.loss_whl: 0.0890, task4.loss_yaw: 0.1858, task4.loss_vel: 0.1880, task4.loss_heatmap: 0.5793, task5.loss_xy: 0.0837, task5.loss_z: 0.0503, task5.loss_whl: 0.1272, task5.loss_yaw: 0.2862, task5.loss_vel: 0.1932, task5.loss_heatmap: 0.7690, loss_depth: 7.2186, loss_semantic: 0.4260, loss: 15.5050, grad_norm: 15.3305
2024-05-16 09:32:20,869 - mmdet - INFO - Epoch [3][100/880]	lr: 1.000e-04, eta: 6:49:33, time: 1.337, data_time: 0.052, memory: 7468, task0.loss_xy: 0.0912, task0.loss_z: 0.0506, task0.loss_whl: 0.0531, task0.loss_yaw: 0.0967, task0.loss_vel: 0.2556, task0.loss_heatmap: 0.7372, task1.loss_xy: 0.0989, task1.loss_z: 0.0599, task1.loss_whl: 0.0866, task1.loss_yaw: 0.1003, task1.loss_vel: 0.1851, task1.loss_heatmap: 1.0020, task2.loss_xy: 0.0990, task2.loss_z: 0.0579, task2.loss_whl: 0.0860, task2.loss_yaw: 0.0929, task2.loss_vel: 0.2386, task2.loss_heatmap: 0.8156, task3.loss_xy: 0.0916, task3.loss_z: 0.0330, task3.loss_whl: 0.0937, task3.loss_yaw: 0.1402, task3.loss_vel: 0.0152, task3.loss_heatmap: 0.5405, task4.loss_xy: 0.0900, task4.loss_z: 0.0424, task4.loss_whl: 0.0918, task4.loss_yaw: 0.1791, task4.loss_vel: 0.1928, task4.loss_heatmap: 0.6382, task5.loss_xy: 0.0850, task5.loss_z: 0.0501, task5.loss_whl: 0.1243, task5.loss_yaw: 0.2812, task5.loss_vel: 0.1827, task5.loss_heatmap: 0.7547, loss_depth: 7.2114, loss_semantic: 0.4141, loss: 15.4591, grad_norm: 16.0885
2024-05-16 09:33:27,126 - mmdet - INFO - Epoch [3][150/880]	lr: 1.000e-04, eta: 6:48:54, time: 1.326, data_time: 0.051, memory: 7468, task0.loss_xy: 0.0910, task0.loss_z: 0.0502, task0.loss_whl: 0.0529, task0.loss_yaw: 0.0999, task0.loss_vel: 0.2599, task0.loss_heatmap: 0.7468, task1.loss_xy: 0.0989, task1.loss_z: 0.0564, task1.loss_whl: 0.0837, task1.loss_yaw: 0.1013, task1.loss_vel: 0.1820, task1.loss_heatmap: 0.9738, task2.loss_xy: 0.0998, task2.loss_z: 0.0523, task2.loss_whl: 0.0833, task2.loss_yaw: 0.0876, task2.loss_vel: 0.2289, task2.loss_heatmap: 0.7711, task3.loss_xy: 0.0915, task3.loss_z: 0.0346, task3.loss_whl: 0.0948, task3.loss_yaw: 0.1382, task3.loss_vel: 0.0168, task3.loss_heatmap: 0.5652, task4.loss_xy: 0.0882, task4.loss_z: 0.0411, task4.loss_whl: 0.0873, task4.loss_yaw: 0.1732, task4.loss_vel: 0.1682, task4.loss_heatmap: 0.6311, task5.loss_xy: 0.0866, task5.loss_z: 0.0505, task5.loss_whl: 0.1261, task5.loss_yaw: 0.2825, task5.loss_vel: 0.1815, task5.loss_heatmap: 0.7653, loss_depth: 7.1365, loss_semantic: 0.4219, loss: 15.3010, grad_norm: 15.1342
2024-05-16 09:34:35,958 - mmdet - INFO - Epoch [3][200/880]	lr: 1.000e-04, eta: 6:48:39, time: 1.377, data_time: 0.050, memory: 7468, task0.loss_xy: 0.0916, task0.loss_z: 0.0496, task0.loss_whl: 0.0532, task0.loss_yaw: 0.0940, task0.loss_vel: 0.2610, task0.loss_heatmap: 0.7477, task1.loss_xy: 0.0977, task1.loss_z: 0.0579, task1.loss_whl: 0.0874, task1.loss_yaw: 0.1016, task1.loss_vel: 0.2110, task1.loss_heatmap: 0.9997, task2.loss_xy: 0.1021, task2.loss_z: 0.0548, task2.loss_whl: 0.0803, task2.loss_yaw: 0.0844, task2.loss_vel: 0.2342, task2.loss_heatmap: 0.7729, task3.loss_xy: 0.0912, task3.loss_z: 0.0354, task3.loss_whl: 0.0971, task3.loss_yaw: 0.1396, task3.loss_vel: 0.0170, task3.loss_heatmap: 0.5782, task4.loss_xy: 0.0876, task4.loss_z: 0.0427, task4.loss_whl: 0.0921, task4.loss_yaw: 0.1808, task4.loss_vel: 0.1775, task4.loss_heatmap: 0.5993, task5.loss_xy: 0.0851, task5.loss_z: 0.0506, task5.loss_whl: 0.1273, task5.loss_yaw: 0.2830, task5.loss_vel: 0.1923, task5.loss_heatmap: 0.7882, loss_depth: 7.2459, loss_semantic: 0.4116, loss: 15.5036, grad_norm: 15.7441
2024-05-16 09:35:42,384 - mmdet - INFO - Epoch [3][250/880]	lr: 1.000e-04, eta: 6:47:58, time: 1.328, data_time: 0.049, memory: 7468, task0.loss_xy: 0.0915, task0.loss_z: 0.0488, task0.loss_whl: 0.0528, task0.loss_yaw: 0.0954, task0.loss_vel: 0.2485, task0.loss_heatmap: 0.7315, task1.loss_xy: 0.0982, task1.loss_z: 0.0575, task1.loss_whl: 0.0889, task1.loss_yaw: 0.0995, task1.loss_vel: 0.2054, task1.loss_heatmap: 0.9944, task2.loss_xy: 0.1041, task2.loss_z: 0.0604, task2.loss_whl: 0.0817, task2.loss_yaw: 0.0859, task2.loss_vel: 0.2165, task2.loss_heatmap: 0.7790, task3.loss_xy: 0.0900, task3.loss_z: 0.0335, task3.loss_whl: 0.0932, task3.loss_yaw: 0.1257, task3.loss_vel: 0.0163, task3.loss_heatmap: 0.5251, task4.loss_xy: 0.0856, task4.loss_z: 0.0397, task4.loss_whl: 0.0868, task4.loss_yaw: 0.1783, task4.loss_vel: 0.1813, task4.loss_heatmap: 0.6088, task5.loss_xy: 0.0853, task5.loss_z: 0.0503, task5.loss_whl: 0.1242, task5.loss_yaw: 0.2803, task5.loss_vel: 0.1815, task5.loss_heatmap: 0.7622, loss_depth: 7.1371, loss_semantic: 0.4435, loss: 15.2685, grad_norm: 21.8087
2024-05-16 09:36:47,901 - mmdet - INFO - Epoch [3][300/880]	lr: 1.000e-04, eta: 6:47:08, time: 1.310, data_time: 0.050, memory: 7468, task0.loss_xy: 0.0906, task0.loss_z: 0.0490, task0.loss_whl: 0.0526, task0.loss_yaw: 0.0923, task0.loss_vel: 0.2681, task0.loss_heatmap: 0.7329, task1.loss_xy: 0.0973, task1.loss_z: 0.0603, task1.loss_whl: 0.0846, task1.loss_yaw: 0.0988, task1.loss_vel: 0.2078, task1.loss_heatmap: 1.0002, task2.loss_xy: 0.0976, task2.loss_z: 0.0544, task2.loss_whl: 0.0817, task2.loss_yaw: 0.0935, task2.loss_vel: 0.2444, task2.loss_heatmap: 0.7892, task3.loss_xy: 0.0906, task3.loss_z: 0.0348, task3.loss_whl: 0.0906, task3.loss_yaw: 0.1355, task3.loss_vel: 0.0164, task3.loss_heatmap: 0.5802, task4.loss_xy: 0.0863, task4.loss_z: 0.0417, task4.loss_whl: 0.0911, task4.loss_yaw: 0.1818, task4.loss_vel: 0.1702, task4.loss_heatmap: 0.6586, task5.loss_xy: 0.0852, task5.loss_z: 0.0512, task5.loss_whl: 0.1249, task5.loss_yaw: 0.2813, task5.loss_vel: 0.1905, task5.loss_heatmap: 0.7770, loss_depth: 7.1241, loss_semantic: 0.4208, loss: 15.4280, grad_norm: 24.4007
2024-05-16 09:37:53,728 - mmdet - INFO - Epoch [3][350/880]	lr: 1.000e-04, eta: 6:46:20, time: 1.317, data_time: 0.053, memory: 7468, task0.loss_xy: 0.0908, task0.loss_z: 0.0512, task0.loss_whl: 0.0533, task0.loss_yaw: 0.0971, task0.loss_vel: 0.2450, task0.loss_heatmap: 0.7347, task1.loss_xy: 0.0956, task1.loss_z: 0.0566, task1.loss_whl: 0.0831, task1.loss_yaw: 0.0967, task1.loss_vel: 0.1990, task1.loss_heatmap: 0.9500, task2.loss_xy: 0.0965, task2.loss_z: 0.0549, task2.loss_whl: 0.0809, task2.loss_yaw: 0.0775, task2.loss_vel: 0.1911, task2.loss_heatmap: 0.7210, task3.loss_xy: 0.0900, task3.loss_z: 0.0342, task3.loss_whl: 0.0905, task3.loss_yaw: 0.1280, task3.loss_vel: 0.0154, task3.loss_heatmap: 0.5435, task4.loss_xy: 0.0901, task4.loss_z: 0.0431, task4.loss_whl: 0.0914, task4.loss_yaw: 0.1845, task4.loss_vel: 0.1947, task4.loss_heatmap: 0.6520, task5.loss_xy: 0.0851, task5.loss_z: 0.0510, task5.loss_whl: 0.1247, task5.loss_yaw: 0.2814, task5.loss_vel: 0.1877, task5.loss_heatmap: 0.7617, loss_depth: 7.1447, loss_semantic: 0.4188, loss: 15.1876, grad_norm: 15.0799
2024-05-16 09:38:59,596 - mmdet - INFO - Epoch [3][400/880]	lr: 1.000e-04, eta: 6:45:31, time: 1.317, data_time: 0.049, memory: 7473, task0.loss_xy: 0.0915, task0.loss_z: 0.0495, task0.loss_whl: 0.0526, task0.loss_yaw: 0.0944, task0.loss_vel: 0.2509, task0.loss_heatmap: 0.7447, task1.loss_xy: 0.0996, task1.loss_z: 0.0598, task1.loss_whl: 0.0885, task1.loss_yaw: 0.1006, task1.loss_vel: 0.2106, task1.loss_heatmap: 1.0213, task2.loss_xy: 0.0990, task2.loss_z: 0.0539, task2.loss_whl: 0.0809, task2.loss_yaw: 0.0863, task2.loss_vel: 0.2158, task2.loss_heatmap: 0.7663, task3.loss_xy: 0.0899, task3.loss_z: 0.0345, task3.loss_whl: 0.0910, task3.loss_yaw: 0.1469, task3.loss_vel: 0.0185, task3.loss_heatmap: 0.5530, task4.loss_xy: 0.0877, task4.loss_z: 0.0398, task4.loss_whl: 0.0920, task4.loss_yaw: 0.1734, task4.loss_vel: 0.1676, task4.loss_heatmap: 0.6208, task5.loss_xy: 0.0847, task5.loss_z: 0.0506, task5.loss_whl: 0.1247, task5.loss_yaw: 0.2820, task5.loss_vel: 0.1846, task5.loss_heatmap: 0.7881, loss_depth: 7.2716, loss_semantic: 0.4116, loss: 15.4790, grad_norm: 15.9205
2024-05-16 09:40:05,445 - mmdet - INFO - Epoch [3][450/880]	lr: 1.000e-04, eta: 6:44:41, time: 1.316, data_time: 0.048, memory: 7473, task0.loss_xy: 0.0903, task0.loss_z: 0.0490, task0.loss_whl: 0.0531, task0.loss_yaw: 0.0949, task0.loss_vel: 0.2499, task0.loss_heatmap: 0.7291, task1.loss_xy: 0.1005, task1.loss_z: 0.0585, task1.loss_whl: 0.0863, task1.loss_yaw: 0.1019, task1.loss_vel: 0.1972, task1.loss_heatmap: 1.0028, task2.loss_xy: 0.1036, task2.loss_z: 0.0538, task2.loss_whl: 0.0815, task2.loss_yaw: 0.0890, task2.loss_vel: 0.2187, task2.loss_heatmap: 0.7614, task3.loss_xy: 0.0894, task3.loss_z: 0.0341, task3.loss_whl: 0.0936, task3.loss_yaw: 0.1354, task3.loss_vel: 0.0171, task3.loss_heatmap: 0.5310, task4.loss_xy: 0.0850, task4.loss_z: 0.0409, task4.loss_whl: 0.0856, task4.loss_yaw: 0.1655, task4.loss_vel: 0.1783, task4.loss_heatmap: 0.6113, task5.loss_xy: 0.0841, task5.loss_z: 0.0502, task5.loss_whl: 0.1230, task5.loss_yaw: 0.2810, task5.loss_vel: 0.1813, task5.loss_heatmap: 0.7457, loss_depth: 7.1994, loss_semantic: 0.4162, loss: 15.2695, grad_norm: 15.6175
2024-05-16 09:41:11,327 - mmdet - INFO - Epoch [3][500/880]	lr: 1.000e-04, eta: 6:43:51, time: 1.318, data_time: 0.050, memory: 7473, task0.loss_xy: 0.0905, task0.loss_z: 0.0495, task0.loss_whl: 0.0531, task0.loss_yaw: 0.0949, task0.loss_vel: 0.2401, task0.loss_heatmap: 0.7183, task1.loss_xy: 0.0994, task1.loss_z: 0.0583, task1.loss_whl: 0.0857, task1.loss_yaw: 0.0954, task1.loss_vel: 0.1924, task1.loss_heatmap: 1.0082, task2.loss_xy: 0.0999, task2.loss_z: 0.0537, task2.loss_whl: 0.0794, task2.loss_yaw: 0.0881, task2.loss_vel: 0.2034, task2.loss_heatmap: 0.7726, task3.loss_xy: 0.0899, task3.loss_z: 0.0338, task3.loss_whl: 0.0933, task3.loss_yaw: 0.1306, task3.loss_vel: 0.0170, task3.loss_heatmap: 0.5481, task4.loss_xy: 0.0913, task4.loss_z: 0.0408, task4.loss_whl: 0.0883, task4.loss_yaw: 0.1766, task4.loss_vel: 0.1650, task4.loss_heatmap: 0.6256, task5.loss_xy: 0.0845, task5.loss_z: 0.0489, task5.loss_whl: 0.1241, task5.loss_yaw: 0.2825, task5.loss_vel: 0.1864, task5.loss_heatmap: 0.7571, loss_depth: 7.1978, loss_semantic: 0.4296, loss: 15.2938, grad_norm: 15.9956
2024-05-16 09:42:16,647 - mmdet - INFO - Epoch [3][550/880]	lr: 1.000e-04, eta: 6:42:55, time: 1.306, data_time: 0.048, memory: 7473, task0.loss_xy: 0.0901, task0.loss_z: 0.0496, task0.loss_whl: 0.0524, task0.loss_yaw: 0.0982, task0.loss_vel: 0.2522, task0.loss_heatmap: 0.7429, task1.loss_xy: 0.0990, task1.loss_z: 0.0559, task1.loss_whl: 0.0841, task1.loss_yaw: 0.0942, task1.loss_vel: 0.1973, task1.loss_heatmap: 0.9761, task2.loss_xy: 0.0995, task2.loss_z: 0.0554, task2.loss_whl: 0.0797, task2.loss_yaw: 0.0786, task2.loss_vel: 0.2150, task2.loss_heatmap: 0.7701, task3.loss_xy: 0.0889, task3.loss_z: 0.0326, task3.loss_whl: 0.0910, task3.loss_yaw: 0.1231, task3.loss_vel: 0.0179, task3.loss_heatmap: 0.5285, task4.loss_xy: 0.0893, task4.loss_z: 0.0427, task4.loss_whl: 0.0919, task4.loss_yaw: 0.1751, task4.loss_vel: 0.2117, task4.loss_heatmap: 0.6857, task5.loss_xy: 0.0839, task5.loss_z: 0.0498, task5.loss_whl: 0.1257, task5.loss_yaw: 0.2813, task5.loss_vel: 0.1825, task5.loss_heatmap: 0.7266, loss_depth: 7.1704, loss_semantic: 0.4240, loss: 15.3128, grad_norm: 15.5740
2024-05-16 09:43:22,614 - mmdet - INFO - Epoch [3][600/880]	lr: 1.000e-04, eta: 6:42:04, time: 1.319, data_time: 0.047, memory: 7473, task0.loss_xy: 0.0910, task0.loss_z: 0.0495, task0.loss_whl: 0.0525, task0.loss_yaw: 0.0966, task0.loss_vel: 0.2431, task0.loss_heatmap: 0.7264, task1.loss_xy: 0.0975, task1.loss_z: 0.0554, task1.loss_whl: 0.0860, task1.loss_yaw: 0.1001, task1.loss_vel: 0.2118, task1.loss_heatmap: 0.9645, task2.loss_xy: 0.1013, task2.loss_z: 0.0517, task2.loss_whl: 0.0836, task2.loss_yaw: 0.0880, task2.loss_vel: 0.2216, task2.loss_heatmap: 0.7692, task3.loss_xy: 0.0896, task3.loss_z: 0.0340, task3.loss_whl: 0.0953, task3.loss_yaw: 0.1315, task3.loss_vel: 0.0179, task3.loss_heatmap: 0.5819, task4.loss_xy: 0.0896, task4.loss_z: 0.0420, task4.loss_whl: 0.0899, task4.loss_yaw: 0.1745, task4.loss_vel: 0.1543, task4.loss_heatmap: 0.6226, task5.loss_xy: 0.0834, task5.loss_z: 0.0496, task5.loss_whl: 0.1241, task5.loss_yaw: 0.2826, task5.loss_vel: 0.1904, task5.loss_heatmap: 0.7442, loss_depth: 7.1761, loss_semantic: 0.4215, loss: 15.2850, grad_norm: 15.5448
2024-05-16 09:44:30,491 - mmdet - INFO - Epoch [3][650/880]	lr: 1.000e-04, eta: 6:41:28, time: 1.358, data_time: 0.049, memory: 7473, task0.loss_xy: 0.0899, task0.loss_z: 0.0494, task0.loss_whl: 0.0524, task0.loss_yaw: 0.0940, task0.loss_vel: 0.2501, task0.loss_heatmap: 0.7184, task1.loss_xy: 0.0996, task1.loss_z: 0.0576, task1.loss_whl: 0.0832, task1.loss_yaw: 0.0966, task1.loss_vel: 0.1884, task1.loss_heatmap: 0.9519, task2.loss_xy: 0.0964, task2.loss_z: 0.0536, task2.loss_whl: 0.0808, task2.loss_yaw: 0.0825, task2.loss_vel: 0.2276, task2.loss_heatmap: 0.7237, task3.loss_xy: 0.0900, task3.loss_z: 0.0313, task3.loss_whl: 0.0871, task3.loss_yaw: 0.1215, task3.loss_vel: 0.0162, task3.loss_heatmap: 0.5049, task4.loss_xy: 0.0851, task4.loss_z: 0.0396, task4.loss_whl: 0.0858, task4.loss_yaw: 0.1638, task4.loss_vel: 0.1707, task4.loss_heatmap: 0.5943, task5.loss_xy: 0.0837, task5.loss_z: 0.0502, task5.loss_whl: 0.1243, task5.loss_yaw: 0.2807, task5.loss_vel: 0.1881, task5.loss_heatmap: 0.7550, loss_depth: 7.2060, loss_semantic: 0.4183, loss: 15.0928, grad_norm: 14.7043
2024-05-16 09:45:35,450 - mmdet - INFO - Epoch [3][700/880]	lr: 1.000e-04, eta: 6:40:28, time: 1.299, data_time: 0.046, memory: 7473, task0.loss_xy: 0.0901, task0.loss_z: 0.0490, task0.loss_whl: 0.0529, task0.loss_yaw: 0.0965, task0.loss_vel: 0.2468, task0.loss_heatmap: 0.7259, task1.loss_xy: 0.0971, task1.loss_z: 0.0570, task1.loss_whl: 0.0849, task1.loss_yaw: 0.0950, task1.loss_vel: 0.1904, task1.loss_heatmap: 0.9588, task2.loss_xy: 0.0999, task2.loss_z: 0.0546, task2.loss_whl: 0.0788, task2.loss_yaw: 0.0799, task2.loss_vel: 0.2022, task2.loss_heatmap: 0.7588, task3.loss_xy: 0.0890, task3.loss_z: 0.0339, task3.loss_whl: 0.0918, task3.loss_yaw: 0.1230, task3.loss_vel: 0.0162, task3.loss_heatmap: 0.5293, task4.loss_xy: 0.0868, task4.loss_z: 0.0421, task4.loss_whl: 0.0838, task4.loss_yaw: 0.1679, task4.loss_vel: 0.1873, task4.loss_heatmap: 0.6238, task5.loss_xy: 0.0835, task5.loss_z: 0.0498, task5.loss_whl: 0.1221, task5.loss_yaw: 0.2791, task5.loss_vel: 0.1850, task5.loss_heatmap: 0.7525, loss_depth: 7.2710, loss_semantic: 0.4009, loss: 15.2376, grad_norm: 16.0876
2024-05-16 09:46:41,003 - mmdet - INFO - Epoch [3][750/880]	lr: 1.000e-04, eta: 6:39:32, time: 1.311, data_time: 0.049, memory: 7473, task0.loss_xy: 0.0898, task0.loss_z: 0.0473, task0.loss_whl: 0.0532, task0.loss_yaw: 0.0919, task0.loss_vel: 0.2389, task0.loss_heatmap: 0.7132, task1.loss_xy: 0.0959, task1.loss_z: 0.0566, task1.loss_whl: 0.0846, task1.loss_yaw: 0.0964, task1.loss_vel: 0.1914, task1.loss_heatmap: 0.9568, task2.loss_xy: 0.0981, task2.loss_z: 0.0594, task2.loss_whl: 0.0820, task2.loss_yaw: 0.0831, task2.loss_vel: 0.2330, task2.loss_heatmap: 0.7737, task3.loss_xy: 0.0894, task3.loss_z: 0.0331, task3.loss_whl: 0.0912, task3.loss_yaw: 0.1251, task3.loss_vel: 0.0164, task3.loss_heatmap: 0.5316, task4.loss_xy: 0.0874, task4.loss_z: 0.0407, task4.loss_whl: 0.0818, task4.loss_yaw: 0.1671, task4.loss_vel: 0.1585, task4.loss_heatmap: 0.5899, task5.loss_xy: 0.0841, task5.loss_z: 0.0503, task5.loss_whl: 0.1226, task5.loss_yaw: 0.2801, task5.loss_vel: 0.1795, task5.loss_heatmap: 0.7487, loss_depth: 7.2259, loss_semantic: 0.4163, loss: 15.1649, grad_norm: 15.1060
2024-05-16 09:47:46,800 - mmdet - INFO - Epoch [3][800/880]	lr: 1.000e-04, eta: 6:38:38, time: 1.316, data_time: 0.049, memory: 7473, task0.loss_xy: 0.0888, task0.loss_z: 0.0506, task0.loss_whl: 0.0520, task0.loss_yaw: 0.0927, task0.loss_vel: 0.2482, task0.loss_heatmap: 0.7017, task1.loss_xy: 0.0981, task1.loss_z: 0.0577, task1.loss_whl: 0.0840, task1.loss_yaw: 0.0923, task1.loss_vel: 0.1832, task1.loss_heatmap: 0.9683, task2.loss_xy: 0.0997, task2.loss_z: 0.0566, task2.loss_whl: 0.0776, task2.loss_yaw: 0.0773, task2.loss_vel: 0.2384, task2.loss_heatmap: 0.7632, task3.loss_xy: 0.0888, task3.loss_z: 0.0341, task3.loss_whl: 0.0855, task3.loss_yaw: 0.1251, task3.loss_vel: 0.0182, task3.loss_heatmap: 0.5156, task4.loss_xy: 0.0839, task4.loss_z: 0.0408, task4.loss_whl: 0.0883, task4.loss_yaw: 0.1643, task4.loss_vel: 0.1704, task4.loss_heatmap: 0.6240, task5.loss_xy: 0.0849, task5.loss_z: 0.0516, task5.loss_whl: 0.1218, task5.loss_yaw: 0.2796, task5.loss_vel: 0.1783, task5.loss_heatmap: 0.7329, loss_depth: 7.2324, loss_semantic: 0.4241, loss: 15.1749, grad_norm: 15.9861
2024-05-16 09:48:52,858 - mmdet - INFO - Epoch [3][850/880]	lr: 1.000e-04, eta: 6:37:45, time: 1.322, data_time: 0.050, memory: 7473, task0.loss_xy: 0.0890, task0.loss_z: 0.0494, task0.loss_whl: 0.0520, task0.loss_yaw: 0.0943, task0.loss_vel: 0.2423, task0.loss_heatmap: 0.7193, task1.loss_xy: 0.0962, task1.loss_z: 0.0565, task1.loss_whl: 0.0844, task1.loss_yaw: 0.0969, task1.loss_vel: 0.1949, task1.loss_heatmap: 0.9839, task2.loss_xy: 0.0999, task2.loss_z: 0.0571, task2.loss_whl: 0.0824, task2.loss_yaw: 0.0841, task2.loss_vel: 0.1967, task2.loss_heatmap: 0.7654, task3.loss_xy: 0.0879, task3.loss_z: 0.0331, task3.loss_whl: 0.0902, task3.loss_yaw: 0.1313, task3.loss_vel: 0.0167, task3.loss_heatmap: 0.5132, task4.loss_xy: 0.0893, task4.loss_z: 0.0395, task4.loss_whl: 0.0846, task4.loss_yaw: 0.1620, task4.loss_vel: 0.1626, task4.loss_heatmap: 0.6350, task5.loss_xy: 0.0827, task5.loss_z: 0.0491, task5.loss_whl: 0.1211, task5.loss_yaw: 0.2767, task5.loss_vel: 0.1818, task5.loss_heatmap: 0.7341, loss_depth: 7.1606, loss_semantic: 0.4312, loss: 15.1269, grad_norm: 16.0893
2024-05-16 09:49:31,717 - mmdet - INFO - Saving checkpoint at 3 epochs
2024-05-16 09:49:34,737 - mmdet - INFO - Saving ema checkpoint at /gpfsdata/home/huliang/bev/multi-SA-BEV/work_dirs/my-sabev-r50/epoch_3_ema.pth
WARNING:torch.distributed.elastic.agent.server.api:Received 2 death signal, shutting down workers
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 37515 closing signal SIGINT
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 37516 closing signal SIGINT
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 37517 closing signal SIGINT
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 37518 closing signal SIGINT
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 37521 closing signal SIGINT
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 37523 closing signal SIGINT
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 37525 closing signal SIGINT
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 37527 closing signal SIGINT
Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7f4442a00430>
Traceback (most recent call last):
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 1328, in __del__
Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7f88b8af0430>
Traceback (most recent call last):
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 1328, in __del__
Exception ignored in: <function _MultiProcessingDataLoaderIter.__del__ at 0x7f5c47bc9430>
Traceback (most recent call last):
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 1328, in __del__
    self._shutdown_workers()
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 1301, in _shutdown_workers
    self._shutdown_workers()
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 1301, in _shutdown_workers
    self._shutdown_workers()
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 1301, in _shutdown_workers
    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/multiprocessing/process.py", line 149, in join
    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/multiprocessing/process.py", line 149, in join
    w.join(timeout=_utils.MP_STATUS_CHECK_INTERVAL)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/multiprocessing/process.py", line 149, in join
    res = self._popen.wait(timeout)
      File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/multiprocessing/popen_fork.py", line 44, in wait
res = self._popen.wait(timeout)    
res = self._popen.wait(timeout)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/multiprocessing/popen_fork.py", line 44, in wait
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/multiprocessing/popen_fork.py", line 44, in wait
            if not wait([self.sentinel], timeout):if not wait([self.sentinel], timeout):if not wait([self.sentinel], timeout):


  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/multiprocessing/connection.py", line 931, in wait
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/multiprocessing/connection.py", line 931, in wait
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/multiprocessing/connection.py", line 931, in wait
    ready = selector.select(timeout)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/selectors.py", line 415, in select
        ready = selector.select(timeout)ready = selector.select(timeout)

  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/selectors.py", line 415, in select
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/selectors.py", line 415, in select
    fd_event_list = self._selector.poll(timeout)
KeyboardInterrupt: 
        fd_event_list = self._selector.poll(timeout)fd_event_list = self._selector.poll(timeout)

KeyboardInterrupt: 
Traceback (most recent call last):
  File "tools/train.py", line 264, in <module>
KeyboardInterrupt: 
    main()
  File "tools/train.py", line 253, in main
    train_model(
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/apis/train.py", line 344, in train_model
Traceback (most recent call last):
  File "tools/train.py", line 264, in <module>
    main()
  File "tools/train.py", line 253, in main
    train_model(
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/apis/train.py", line 344, in train_model
Traceback (most recent call last):
  File "tools/train.py", line 264, in <module>
    main()
  File "tools/train.py", line 253, in main
    train_model(
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/apis/train.py", line 344, in train_model
    train_detector(
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/apis/train.py", line 319, in train_detector
    train_detector(
    train_detector(  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/apis/train.py", line 319, in train_detector

  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/apis/train.py", line 319, in train_detector
    runner.run(data_loaders, cfg.workflow)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/epoch_based_runner.py", line 130, in run
    runner.run(data_loaders, cfg.workflow)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/epoch_based_runner.py", line 130, in run
    runner.run(data_loaders, cfg.workflow)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/epoch_based_runner.py", line 130, in run
        epoch_runner(data_loaders[i], **kwargs)epoch_runner(data_loaders[i], **kwargs)

  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/epoch_based_runner.py", line 51, in train
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/epoch_based_runner.py", line 51, in train
        self.run_iter(data_batch, train_mode=True, **kwargs)self.run_iter(data_batch, train_mode=True, **kwargs)

  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/epoch_based_runner.py", line 29, in run_iter
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/epoch_based_runner.py", line 29, in run_iter
        outputs = self.model.train_step(data_batch, self.optimizer,outputs = self.model.train_step(data_batch, self.optimizer,

  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/parallel/distributed.py", line 59, in train_step
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/parallel/distributed.py", line 59, in train_step
    epoch_runner(data_loaders[i], **kwargs)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/epoch_based_runner.py", line 51, in train
    self.run_iter(data_batch, train_mode=True, **kwargs)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/epoch_based_runner.py", line 29, in run_iter
    outputs = self.model.train_step(data_batch, self.optimizer,
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/parallel/distributed.py", line 59, in train_step
    output = self.module.train_step(*inputs[0], **kwargs[0])
      File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmdet/models/detectors/base.py", line 248, in train_step
output = self.module.train_step(*inputs[0], **kwargs[0])
      File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmdet/models/detectors/base.py", line 248, in train_step
output = self.module.train_step(*inputs[0], **kwargs[0])
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmdet/models/detectors/base.py", line 248, in train_step
    losses = self(**data)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    losses = self(**data)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    losses = self(**data)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
Traceback (most recent call last):
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/fp16_utils.py", line 146, in new_func
Traceback (most recent call last):
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/fp16_utils.py", line 146, in new_func
    output = old_func(*new_args, **new_kwargs)
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/detectors/base.py", line 60, in forward
    output = old_func(*new_args, **new_kwargs)
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/detectors/base.py", line 60, in forward
    return forward_call(*input, **kwargs)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/fp16_utils.py", line 146, in new_func
    output = old_func(*new_args, **new_kwargs)
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/detectors/base.py", line 60, in forward
    return forward_call(*input, **kwargs)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/fp16_utils.py", line 146, in new_func
    return forward_call(*input, **kwargs)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/fp16_utils.py", line 146, in new_func
    output = old_func(*new_args, **new_kwargs)
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/detectors/base.py", line 60, in forward
    output = old_func(*new_args, **new_kwargs)
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/detectors/base.py", line 60, in forward
    return self.forward_train(**kwargs)
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/detectors/mysabev.py", line 191, in forward_train
        return self.forward_train(**kwargs)    return self.forward_train(**kwargs)
return self.forward_train(**kwargs)    

  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/detectors/mysabev.py", line 191, in forward_train
return self.forward_train(**kwargs)  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/detectors/mysabev.py", line 191, in forward_train

  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/detectors/mysabev.py", line 191, in forward_train
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/detectors/mysabev.py", line 191, in forward_train
    losses_pts = self.forward_pts_train(pts_feats, gt_bboxes_3d,
              File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/detectors/centerpoint.py", line 83, in forward_pts_train
    losses_pts = self.forward_pts_train(pts_feats, gt_bboxes_3d,losses_pts = self.forward_pts_train(pts_feats, gt_bboxes_3d,losses_pts = self.forward_pts_train(pts_feats, gt_bboxes_3d,losses_pts = self.forward_pts_train(pts_feats, gt_bboxes_3d,



  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/detectors/centerpoint.py", line 83, in forward_pts_train
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/detectors/centerpoint.py", line 83, in forward_pts_train
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/detectors/centerpoint.py", line 83, in forward_pts_train
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/detectors/centerpoint.py", line 83, in forward_pts_train
    losses = self.pts_bbox_head.loss(*loss_inputs)    
    losses = self.pts_bbox_head.loss(*loss_inputs)      File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/dense_heads/centerpoint_head.py", line 599, in loss
    losses = self.pts_bbox_head.loss(*loss_inputs)
losses = self.pts_bbox_head.loss(*loss_inputs)losses = self.pts_bbox_head.loss(*loss_inputs)

  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/dense_heads/centerpoint_head.py", line 599, in loss

  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/dense_heads/centerpoint_head.py", line 599, in loss
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/dense_heads/centerpoint_head.py", line 599, in loss
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/dense_heads/centerpoint_head.py", line 599, in loss
    heatmaps, anno_boxes, inds, masks = self.get_targets(    
heatmaps, anno_boxes, inds, masks = self.get_targets(
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/dense_heads/centerpoint_head.py", line 421, in get_targets
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/dense_heads/centerpoint_head.py", line 421, in get_targets
        heatmaps, anno_boxes, inds, masks = self.get_targets(heatmaps, anno_boxes, inds, masks = self.get_targets(

  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/dense_heads/centerpoint_head.py", line 421, in get_targets
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/dense_heads/centerpoint_head.py", line 421, in get_targets
    heatmaps, anno_boxes, inds, masks = self.get_targets(
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/dense_heads/centerpoint_head.py", line 421, in get_targets
    heatmaps, anno_boxes, inds, masks = multi_apply(    
    heatmaps, anno_boxes, inds, masks = multi_apply(heatmaps, anno_boxes, inds, masks = multi_apply(
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmdet/core/utils/misc.py", line 30, in multi_apply

      File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmdet/core/utils/misc.py", line 30, in multi_apply
heatmaps, anno_boxes, inds, masks = multi_apply(  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmdet/core/utils/misc.py", line 30, in multi_apply

  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmdet/core/utils/misc.py", line 30, in multi_apply
    heatmaps, anno_boxes, inds, masks = multi_apply(
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmdet/core/utils/misc.py", line 30, in multi_apply
    return tuple(map(list, zip(*map_results)))
      File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/dense_heads/centerpoint_head.py", line 567, in get_targets_single
    return tuple(map(list, zip(*map_results)))return tuple(map(list, zip(*map_results)))

      File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/dense_heads/centerpoint_head.py", line 556, in get_targets_single
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/dense_heads/centerpoint_head.py", line 520, in get_targets_single
return tuple(map(list, zip(*map_results)))
      File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/dense_heads/centerpoint_head.py", line 520, in get_targets_single
return tuple(map(list, zip(*map_results)))
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/models/dense_heads/centerpoint_head.py", line 544, in get_targets_single
    z.unsqueeze(0), box_dim,
KeyboardInterrupt    radius = gaussian_radius(
    
ind[new_idx] = y * feature_map_size[0] + x
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/core/utils/gaussian.py", line 71, in gaussian_radius
    radius = gaussian_radius(
KeyboardInterrupt  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/core/utils/gaussian.py", line 84, in gaussian_radius

    
During handling of the above exception, another exception occurred:

if not (0 <= center_int[0] < feature_map_size[0]Traceback (most recent call last):

  File "tools/train.py", line 264, in <module>
KeyboardInterrupt
    main()
  File "tools/train.py", line 253, in main
    train_model(
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/apis/train.py", line 344, in train_model
    train_detector(
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/apis/train.py", line 319, in train_detector
    runner.run(data_loaders, cfg.workflow)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/epoch_based_runner.py", line 130, in run
    epoch_runner(data_loaders[i], **kwargs)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/epoch_based_runner.py", line 51, in train
    self.run_iter(data_batch, train_mode=True, **kwargs)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/epoch_based_runner.py", line 29, in run_iter
    outputs = self.model.train_step(data_batch, self.optimizer,
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/parallel/distributed.py", line 59, in train_step
    output = self.module.train_step(*inputs[0], **kwargs[0])
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmdet/models/detectors/base.py", line 248, in train_step
    losses = self(**data)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/fp16_utils.py", line 146, in new_func
    output = old_func(*new_args, **new_kwargs)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/autocast_mode.py", line 188, in __exit__
    c1 = width * height * (1 - min_overlap) / (1 + min_overlap)
    sq3 = torch.sqrt(b3**2 - 4 * a3 * c3)
KeyboardInterrupt  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/_tensor.py", line 27, in wrapped


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "tools/train.py", line 264, in <module>
    main()
  File "tools/train.py", line 253, in main
    train_model(
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/apis/train.py", line 344, in train_model
    train_detector(
  File "/gpfsdata/home/huliang/bev/multi-SA-BEV/mmdet3d/apis/train.py", line 319, in train_detector
    runner.run(data_loaders, cfg.workflow)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/epoch_based_runner.py", line 130, in run
    epoch_runner(data_loaders[i], **kwargs)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/epoch_based_runner.py", line 51, in train
    self.run_iter(data_batch, train_mode=True, **kwargs)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/epoch_based_runner.py", line 29, in run_iter
    outputs = self.model.train_step(data_batch, self.optimizer,
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/parallel/distributed.py", line 59, in train_step
    output = self.module.train_step(*inputs[0], **kwargs[0])
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmdet/models/detectors/base.py", line 248, in train_step
    losses = self(**data)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/mmcv/runner/fp16_utils.py", line 146, in new_func
    output = old_func(*new_args, **new_kwargs)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/autocast_mode.py", line 188, in __exit__
    torch.clear_autocast_cache()
    KeyboardInterrupttorch.clear_autocast_cache()

KeyboardInterrupt
    if has_torch_function(args):
KeyboardInterrupt
WARNING:torch.distributed.elastic.multiprocessing.api:Unable to shutdown process 37515 via 2, forcefully exitting via 9
WARNING:torch.distributed.elastic.multiprocessing.api:Unable to shutdown process 37516 via 2, forcefully exitting via 9
WARNING:torch.distributed.elastic.multiprocessing.api:Unable to shutdown process 37523 via 2, forcefully exitting via 9
Traceback (most recent call last):
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/distributed/launch.py", line 193, in <module>
    main()
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/distributed/launch.py", line 189, in main
    launch(args)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/distributed/launch.py", line 174, in launch
    run(args)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/distributed/run.py", line 710, in run
    elastic_launch(
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/distributed/launcher/api.py", line 131, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/distributed/launcher/api.py", line 252, in launch_agent
    result = agent.run()
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/distributed/elastic/metrics/api.py", line 125, in wrapper
    result = f(*args, **kwargs)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/distributed/elastic/agent/server/api.py", line 709, in run
    result = self._invoke_run(role)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/distributed/elastic/agent/server/api.py", line 843, in _invoke_run
    time.sleep(monitor_interval)
  File "/gpfsdata/home/huliang/anaconda3/envs/multi/lib/python3.8/site-packages/torch/distributed/elastic/multiprocessing/api.py", line 60, in _terminate_process_handler
    raise SignalException(f"Process {os.getpid()} got signal: {sigval}", sigval=sigval)
torch.distributed.elastic.multiprocessing.api.SignalException: Process 37464 got signal: 2
